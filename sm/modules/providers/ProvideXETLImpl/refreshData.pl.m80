<: #-*- perl -*-
# $m80path = [{ command => embedperl, chmod => '+x' }]
use Helpers::PerlScript;

my $ps = Helpers::PerlScript->new( name => 'getData.pl' , 
                                   description => 'remote script run on the mas90 box to fetch new or updated data',
                                   include => [DB::DBHandleFactory,
					       DB::RowSet,
					       DB::ProvideXHandle],
                                   getopts => [{tag => "user:s",
						required => 1,
						description => "mas90 user"},
					       {tag => "password:s",
						required => 1,
						description => "mas90 password"},
					       {tag => "fields:s",
						default => '*',
						description => "a list of fields to select from the table"},
					       {tag => "sid:s",
						required => 1,
						description => "mas90 sid"},],
                                   );
print $ps->dump(); print $ps->pod();
:>

debugPrint(0, "$user\@$sid");

my $dbhandle = DB::ProvideXHandle->new(user => "$user",
				       SID => "$sid",
				       password => "$password");

my $dbh = $dbhandle->getDbh();

$dbh->{LongReadLen} = 147483647; 

my @tableList = ();

for (my $i = 0 ; $i <= $#ARGV ; $i++) {

    my ($tn, $DATEUPDATED,$TIMEUPDATED,$DATECREATED,$TIMEUPDATED) = split (/:/,$ARGV[$i]);

    my $refresh = ((defined $DATEUPDATED) ? 1 : undef);

    push (@tableList, $tn);

    debugPrint(0,"loading table record for $tn");

    my $table = DB::Table->new (handle => $dbhandle,
				name => $tn);

    my @table;
    push (@table,$table);

    my $_table = Data::Dumper->new(\@table);
    $_table->Purity(1);
    $_table->Varname($tn . "_table");

    my $rs = DB::RowSet->new (dbh => $dbh,
			      lc => 1, # force lower case field names.
			      sql => "select $fields from $tn",
# 			      ($refresh 
# 			       ? "
# where dateupdated = XXX ; unknown how to do this in ProvideX ODBC driver
# " 
# 			       : "")
			      );


    my %results = %{$rs->getResults()};                                         # 

    my  @data;
    push(@data,\%results);

    my $dumper = Data::Dumper->new (\@data);
    $dumper->Purity(1);
    $dumper->Varname($tn . "_data");
    print $dumper->Dump();
    print $_table->Dump();
    debugPrint(0,"end dumping table record for $tn");
}

my @_tableList = ();
push (@_tableList, \@tableList);

my $_tableList = Data::Dumper->new (\@_tableList);
$_tableList->Purity(1);
$_tableList->Varname("tableList");
print $_tableList->Dump();

exit 0;

