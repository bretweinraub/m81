<: #-*-perl-*-
use Helpers::moduleHelpers;
 :>
<!-- begin module.xml for <:= &moduleHelpers::moduleName; :>  $m80path = [{command => "embedperl"}]  -->


<ChainGang name="$(env.M80_BDF)" 
	   wwwroot="/var/www/html/$(env.M80_BDF)/taskData"
	   urlbase="/$(env.M80_BDF)/taskData">

  <ChainDB username="$(env.CONTROLLER_USER)" 
	   password="$(env.CONTROLLER_PASSWD)" 
	   port="$(env.CONTROLLER_PORT)"
	   host="$(env.CONTROLLER_HOST)"
	   sid="$(env.CONTROLLER_SID)"/>

  <exports>
    <export value="^PATH"/>
    <export value="^PERL5LIB"/>
    <export value="^CONTROLLER"/>
    <export value="^ORACLE"/>
  </exports>

  <module name="TEST_CHASSIS"
	  deployDir="$(env.CONTROLLER_deploy_PATH)/testMachine">
    <tasks>
      <task name="parallelTest"
	    parallelismKey="$(task.name)"
	    maxParallelism="1">
	<exports>
	  <export value="name"/>
	</exports>
      </task>

      <task name="restartTest"/>

      <!-- exportTest -->
      <task name="exportTest">
	<exports>
	  <export value="goodValue"/>
	</exports>
      </task>

    </tasks>
    <tasks>
      <task name="apTest"
	    maxParallelism="1"/>
    </tasks>
    <actions>
      <action name="sleep"
              command="sleep $(task.arg1)"/>
      <action name="exportTest"
	      command="env">
	<exports>
	  <export value="$(task.contextValue)"/>
	</exports>
	<transitionMap>
	  <transition type="returnCode"
		      value="0" 
		      code="$thistask->transitionTo(nextaction => q(__SUCCESS__))"/>
	</transitionMap>
      </action>
	      

      <action name="parallelTest"
	      parallelismKey="$(task.actionKey)"
	      command="sleep $(task.sleepVal) ; exit $(task.exitVal)">
	<transitionMap>
	  <transition type="returnCode"
		      value="0" 
		      code="$thistask->transitionTo(nextaction => q(__SUCCESS__))"/>
	</transitionMap>
      </action>

      <action name="restartTest"
	      isTransactional="true"
	      command="exit 0">
	<transitionMap>
	  <transition type="returnCode"
		      value="0" 
		      code="$thistask->transitionTo(nextaction => q(__SUCCESS__))"/>
	</transitionMap>
      </action>

<:

%actions = (a => [{n => errorTest,
		   c => 'exit 1',
		   extras => q(maxFailures="3"
			       isTransactional="1"),
		   transitions => { 0 => __SUCCESS__, 
				    '\d+' => __ERROR__ },
		   t => __SUCCESS__,},]);

%actionParallelTest = (a => [{n => apTest,
			      c => 'sleep $(task.sleepVal) ; exit $(task.exitVal)',
			      extras => q(maxFailures="15"
					  isTransactional="1"),
			      transitions => { 0 => __SUCCESS__, 
					       '\d+' => __ERROR__ },
			      t => __SUCCESS__,},]);

%actionParallelTest2 = (a => [{n => apTest2,
			      c => 'sleep $(task.sleepVal) ; exit $(task.exitVal)',
			      extras => q(maxFailures="15"
					  isTransactional="1"
					  maxParallelism="1"),
			      transitions => { 0 => __SUCCESS__, 
					       '\d+' => __ERROR__ },
			      t => __SUCCESS__,},]);

%parentTest = (a => [{n => parentTest,
		      p => true,
		      t => __SUCCESS__,
		      c => 'env ; createTask.pl -task parentTest2_parent -parent $(task.task_id) ; createTask.pl -task parentTest2_parent  -parent $(task.task_id)'}]);

%parentTest2 = (a => [{n => parentTest2,
		       p => true,
		       t => __SUCCESS__,
		       c => 'createTask.pl -task sleep -context arg1=10 -parent $(task.task_id)',}]);

:>

<:= moduleHelpers::chainActions(%actions); :>
<:= moduleHelpers::chainActions(%actionParallelTest); :>
<:= moduleHelpers::chainActions(%actionParallelTest2); :>
<:= moduleHelpers::chainActions(%parentTest); :>
<:= moduleHelpers::chainActions(%parentTest2); :>
    </actions>
  </module>
</ChainGang>

