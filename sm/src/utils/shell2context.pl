#!/usr/bin/perl

my @SAVE_ARGS=@ARGV;

use Carp;
use Getopt::Long;
use Data::Dumper;
use Pod::Usage;
use File::Basename;

sub print_usage {
    if (scalar @_ > 0) {
        print STDERR "@_\n";
        exit(1);
    } else {
        pod2usage({ -exitval => 1, 
                    -verbose => ($debug ? $debug : 1),
                    -output  => \*STDERR});
    }
}

use DB::DBHandleFactory;
use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}

sub docmdi {    
    printmsg "@_";
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - ignoring\n";
        }
    }
    $rc;
}
use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}
sub cleanup ($@) { 
    my $exit_code = shift;
    printmsg @_ if scalar @_;
    printmsg "exiting with exit code = $exit_code";
    exit $exit_code;
}
sub debugPrint ($@) { 
    my $level = shift;
    if ($debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}
use Term::ANSIColor qw(:constants);
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, "@_", RESET }
my $task_id;
$task_id = $ENV{task_id} if $ENV{task_id};
my $nodelete;
$nodelete = $ENV{nodelete} if $ENV{nodelete};
my $verbose;
$verbose = $ENV{verbose} if $ENV{verbose};
$trace = "0";
$trace = $ENV{trace} if $ENV{trace};
$debug = "0";
$debug = $ENV{debug} if $ENV{debug};
my $help = "0";
$help = $ENV{help} if $ENV{help};

GetOptions( 	'task_id:i'	=> \$task_id,
	'nodelete'	=> \$nodelete,
	'verbose'	=> \$verbose,
	'trace'	=> \$trace,
	'debug+'	=> \$debug,
	'help'	=> \$help,
 );

print_usage() if $help;

=pod

=head1 NAME

shell2context.pl    

=head1 SYNOPSIS

description for shell2context

=head1 ARGUMENTS

=over 4


=item 'task_id:i'

task_id to update


=item 'nodelete'

don't delete the row first


=item 'verbose'

don't delete the row first


=item 'trace'

The $trace command line flag turns on trace functionality


=item 'debug+'

The $debug command line flag is additive and can be used with the &debugPrint subroutine


=item 'help'

The help command line flag will print the help message



=back



=head1 PERLSCRIPT GENERATED SCRIPTS

This script was generated with the Helpers::PerlScript pre-compiler.

This file was automatically generated from the file: shell2context.pl.m80 by
bweinraub on  (Linux li298-104 2.6.38-linode31 #1 SMP Mon Mar 21 21:22:33 UTC 2011 i686 GNU/Linux
) on Fri Apr 22 19:52:31 2011.

The following functions are included by default. The functions all have 
prototypes that make the parens optional.

=over 4

=item printmsg (@)

Will print a formatted message to STDERR.

=item docmdi (@)

Will run a system command and ignore the return code

=item docmd (@)

Will run a system command and exit with the return code of the child process, if it is non-zero

=item debugPrint ($@)

Use it like C<debugPrint 1, 'Some info message'> or C<debugPrint 2, 'Some trace message'> and
it will print out a little more information than the printmsg command.

=back

=cut

# ## This is autogenerated documentation

    my $dbhandle = DB::DBHandleFactory::newDBHandle(namespace => "CONTROLLER");
 
while (<>) {
  SWITCH: {
      next if /^\#/;
      /export\s+([\w_]+)="(.*)"/ && do {
	  my $tag=$1;
	  my $value=$2;
          $value =~ s/\'//g;
	  if ($task_id) {
	      $dbhandle->execute (sql => "delete from task_context where task_id = $task_id and tag = '$tag'", 
				  verbose => ($main::verbose ? $main::verbose : 0)) unless $nodelete;
	      $dbhandle->execute (sql => "insert into task_context (task_id, tag, value) values ($task_id, '$tag', '$value')", 
				  verbose => ($main::verbose ? $main::verbose : 0));
	    } else {
		print STDERR "insert into task_context (task_id, tag, value) values (\$task_id, '$tag', '$value')\n";
	    }
	  last SWITCH;
      };
      confess ("failed to parse line $_");
  }
}

cleanup 0; # "
