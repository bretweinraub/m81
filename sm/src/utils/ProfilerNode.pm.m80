<: #-*- perl -*-



# $m80path = [{command => "embedperl" }];
use Helpers::PerlObject; 

my $po = Helpers::PerlObject->new (name => "ProfilerNode",
			           isa => '',
                                   include => [List::Object],
                                   example =>
q[
    my $ProfilerNode = $ProfilerNode->new();   # stub example .... expand
],
				   description => 'A node in the tree generated by dprofpp -S');

$po->setMembers([
		 {name => "indent", 
		  type => "string", 
		  required => 1,
		  description => "Depth of this node"},
		 {name => "indentString", 
		  type => "string", 
		  required => 1,
		  description => "Actual indentation text"},
		 {name => "parent",
		  description => "Parent of this node",
		  ref => "ProfilerNode"},
		 {name => "elements",
		  ref => 'ARRAY',
                  description => "Array of UXFElement objects in this document"},
		 {name => "children",
		  ref => "List::Object",
		  description => "Order List of all the children of this node"},
		 {name => "method",
		  required => 1,
		  description => "The method for this node",},
		 {name => "iterations",
		  required => 1,
		  description => "Number of times that this method was called at this node of the tree",},
		 {name => "time",
		  type => "float",
		  description => "Amount of time spent at this node of the tree as represented by a float"},
]); 

:>
<:= $po->dump(); :>

sub _new {
<:= $po->dumpContract(method => "_new"); :>
    do {
	$this->setChildren(List::Object->new(type => "ProfilerNode"));
    };
}

sub addChild {
    <:= $po->contract('addChild' => {description => "add a child to this node",
				     getopts => [{ name => "node",
						   required => 1,
						   ref => "ProfilerNode",
						   description => "ProfilerNode object to add as a child"}]}); :>
       
    do {      
	$this->getChildren()->add($node);
    };
}

sub getTimeInSeconds {
    <:= $po->contract('getTimeInSeconds' => {description => "return the time of the method in seconds",}); :>

    do {
	my $time = $this->getTime();
	return abs ($time * 100);
    }
}

sub getTimePerIteration {
    <:= $po->contract('getTimePerIteration' => {description => "return the time of each iteration in seconds",}); :>

    do {
	my $ret = sprintf ("%f", $this->getTime() / $this->getIterations());
	return $ret;
    }
}

	    

