


=pod

=head1 NAME - Newable

A Newable is anything that can be 'newed' ; that is a templated something (as in files).

=head1 EXAMPLE


     new Newable (name => "Interface Module",
		  callSignature => 'docmd("m80 --execute expandTemplate.sh -m $module -t $TOP/templates/interfaceModule.tmpl.m80")',
		  getopts => [{tag => 'module',
			       variable => '$module',
			       description => 'Name of the new interface module'}]);


=cut

# This file was automatically generated from Newable.pm.m80 by 
# bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)
# DO NOT EDIT THIS FILE 


package Newable;

use Carp;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use strict;
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, @_, RESET }

use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}

use Helpers::PerlScript;
use Getopt::Long;
use fields qw( name callSignature getopts description debug );

=pod

=head1 CONSTRUCTOR

=over 4

=item Newable->new()

initializes on object of type Newable

=back

=cut


# %_allSetters - an array of all setters for all members of the class
my %_allSetters = ();

my %_allMemberAttributes = ();

BEGIN {
# $_allMembers{_TYPE} = 1; # - WHAT IS THIS FOR?
$_allMemberAttributes{name} = {
          'required' => 1,
          'name' => 'name',
          'description' => 'name of this newable'
        }
;
$_allSetters{name} = \&setName;
$_allMemberAttributes{callSignature} = {
          'required' => 1,
          'name' => 'callSignature',
          'description' => 'the call signature for this Newable; some metadata about how to create such a thing'
        }
;
$_allSetters{callSignature} = \&setCallSignature;
$_allMemberAttributes{getopts} = {
          'name' => 'getopts',
          'description' => 'getopts for this newable'
        }
;
$_allSetters{getopts} = \&setGetopts;
$_allMemberAttributes{description} = {
          'required' => 1,
          'name' => 'description',
          'description' => 'hopefully meaningful description of this Newable'
        }
;
$_allSetters{description} = \&setDescription;
$_allMemberAttributes{debug} = {
          'name' => 'debug',
          'description' => 'debug allows an object to specify its debugPrint level'
        }
;
$_allSetters{debug} = \&setDebug;


}

#
# TODO ... needs to merge in the parents attributes; the commented out block is close.
#
sub getReflectionAPI { 
#     my $this = shift; 
#     my %unified = (%{$this->SUPER::getReflectionAPI()}, %_allMemberAttributes);
#     \%unified;
    \%_allMemberAttributes;
}

#
# For some (currently) mysterious reason on perl 5.8.8 on the Linux kernel 2.6.18-8.1.14.el5 there
# is no data in the %_allMemberAttributes.  Therefore here is another way to get a list of member data
# out of the class.
#

sub getMembers {
    my $this = shift;
    my @ret = keys(%{$this});
    \@ret;
}
    
sub new {
    my Newable $this = shift;

    print STDERR "in Newable::new(" . join (",", @_) . ")\n" if $ENV{DEBUG};
    Confess "Missing the value for an argument (even nulls) on creation of Newable" if scalar @_ % 2 != 0;

    my %args = @_;

    unless (ref $this) {
	$this = fields::new($this);
    }

    #
    # This next block tries to set any of the values that you passed into this
    # constructor. You might have said new X( arg1 => 123, arg2 => 456); It is going
    # to take that and try to call setArg1(123), setArg2(123). I.e. it is going
    # to derive the setter for your named argument (by upper casing the first letter
    # of your argument name) and then if it finds that the object can call the
    # setter (i.e. it is defined in this class or any parent class) it will call it.
    #
    # If the setter cannot be found - then assume that this is a bad argument
    # that was passed to the function and die with that information.
    #
    foreach my $key (keys(%args)) {

        my $setterName = $key;                              # workspace for determining the name of the setter
        $setterName =~ s/^(\w)/uc($1)/e;                    # uc the first char of the argument name. I.e. arg1 => Arg1.
        $setterName = "set" . $setterName;                  # prepend "set" to the uppercased argument name.

        if (my $fn = $this->UNIVERSAL::can($setterName)) {  # test that the object can call this function
            $fn->($this,$args{$key});                       # and call it
        } else {                                            # else fail with an error. 
            Confess "Field named \"$key\" is not defined in object Newable. typo ?\n";
        }
    }


    Confess "cannot initialize object of type Newable without required member variable name"
        unless exists $this->{name};

    Confess "cannot initialize object of type Newable without required member variable callSignature"
        unless exists $this->{callSignature};

    Confess "cannot initialize object of type Newable without required member variable description"
        unless exists $this->{description};


    #### __new is the magic "pre-constructor".  You can intercept a call to the parent
    #### constructor by defining a __new() procedure in your class.

    eval {Newable::__new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?Newable::__new/;

    #### Now call the parent constructor, if any.

    eval {$this->SUPER::new(%args)};

    croak $@ if $@
	and $@ !~ /^Can\'t locate object method/;

    ####
    #### Typically this following contains your "real" constructor"
    #### so if you are debugging this next call my be a good candidate to step into.
    ####

    eval {Newable::_new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?Newable::_new/;

    $this;
}

###  END GENERATED CODE

=pod

=head1 MEMBERS AND MEMBER ACCESS METHODS

=cut



=pod

=head2 name => "any string"*

name of this newable

=cut

sub getName {

=pod

=head3 $Newable->getName ()


getter for member name

=cut

    my $this = shift;





    return $this->{name};
}
sub setName {

=pod

=head3 $Newable->setName (name => "any string"*)

 - name ("any string")		 : name of this newable

setter for member name

=cut

    my $this = shift;


    my $name = shift;
    Confess "argument 'name' is required for Newable->setName()" unless defined $name;



    $this->{name} = $name;
    return $name;
}



=pod

=head2 callSignature => "any string"*

the call signature for this Newable; some metadata about how to create such a thing

=cut

sub getCallSignature {

=pod

=head3 $Newable->getCallSignature ()


getter for member callSignature

=cut

    my $this = shift;





    return $this->{callSignature};
}
sub setCallSignature {

=pod

=head3 $Newable->setCallSignature (callSignature => "any string"*)

 - callSignature ("any string")		 : the call signature for this Newable; some metadata about how to create such a thing

setter for member callSignature

=cut

    my $this = shift;


    my $callSignature = shift;
    Confess "argument 'callSignature' is required for Newable->setCallSignature()" unless defined $callSignature;



    $this->{callSignature} = $callSignature;
    return $callSignature;
}



=pod

=head2 getopts => "any string"

getopts for this newable

=cut

sub getGetopts {

=pod

=head3 $Newable->getGetopts ()


getter for member getopts

=cut

    my $this = shift;





    return $this->{getopts};
}
sub setGetopts {

=pod

=head3 $Newable->setGetopts (getopts => "any string")

 - getopts ("any string")		 : getopts for this newable

setter for member getopts

=cut

    my $this = shift;


    my $getopts = shift;



    $this->{getopts} = $getopts;
    return $getopts;
}



=pod

=head2 description => "any string"*

hopefully meaningful description of this Newable

=cut

sub getDescription {

=pod

=head3 $Newable->getDescription ()


getter for member description

=cut

    my $this = shift;





    return $this->{description};
}
sub setDescription {

=pod

=head3 $Newable->setDescription (description => "any string"*)

 - description ("any string")		 : hopefully meaningful description of this Newable

setter for member description

=cut

    my $this = shift;


    my $description = shift;
    Confess "argument 'description' is required for Newable->setDescription()" unless defined $description;



    $this->{description} = $description;
    return $description;
}



=pod

=head2 debug => "any string"

debug allows an object to specify its debugPrint level

=cut

sub getDebug {

=pod

=head3 $Newable->getDebug ()


getter for member debug

=cut

    my $this = shift;





    return $this->{debug};
}
sub setDebug {

=pod

=head3 $Newable->setDebug (debug => "any string")

 - debug ("any string")		 : debug allows an object to specify its debugPrint level

setter for member debug

=cut

    my $this = shift;


    my $debug = shift;



    $this->{debug} = $debug;
    return $debug;
}



=pod

=head1 GENERALIZED OBJECT METHODS 

=cut



=pod

=over 4

=item _require (member1,member2,...,memberN)

will iterate over arguments and validate there is a non null value for each of the listed object members

=back

=cut


sub _require
{
    my $this = shift;
    map { 
	Confess "required member variable $_ not set" unless $this->getProperty($_);
    } (@_);
}

sub debugPrint { 
    my $this = shift;
    my $level = shift;
    Confess 'you\'ve called debugPrint - convert this call to $this->debugPrint()'
	unless ref($this);
    if ($this->{debug} >= $level || $main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

sub debugPrint_s {   # static version of debug print
    my $level = shift;
    if ($main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}

1;

=pod

=head1 NOTES ON THIS DOCUMENTATION

In method signatures a * denotes a required option.

This file was automatically generated from Newable.pm.m80 by 
bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)


=head1 OBJECT METHODS

=cut



sub _new {

=pod

=head3 $Newable->_new ()


callback constructor, do not call directly use new() instead

=cut

    my $this = shift;

    Confess "Newable->_new requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



}

sub getGetoptsStatement
{

=pod

=head3 $Newable->getGetoptsStatement ()


returns a B<Getopts::Long> code block that validates the getopts class variable for this object

=cut

    my $this = shift;

    Confess "Newable->getGetoptsStatement requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;




    my $dummy = Helpers::PerlScript->new(name => "_dummy",
					 description => "dummy",
					 getopts => $this->getGetopts());

    return $dummy->_getopts();
}

=pod

=head1 SEE ALSO

B<portalPerfFunc.sh>
B<New.pl>
B<PerlScript.pm>

=cut
