
    

=pod

=head1 NAME - Crawler::CrawlerBase

Crawler::CrawlerBase description; stub description please expand

=head1 EXAMPLE


    my $Crawler::CrawlerBase = $Crawler::CrawlerBase->new();   # stub example .... expand


=cut

# This file was automatically generated from CrawlerBase.pm.m80 by 
# bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)
# DO NOT EDIT THIS FILE 


package Crawler::CrawlerBase;

use Carp;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use strict;
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, @_, RESET }

use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}

use WWW::Mechanize;
use File::Basename;
use HTTP::Cookies;
use fields qw( recordsToCrawl username password loginURL cookies mechHandle debug );

=pod

=head1 CONSTRUCTOR

=over 4

=item Crawler::CrawlerBase->new()

initializes on object of type Crawler::CrawlerBase

=back

=cut


# %_allSetters - an array of all setters for all members of the class
my %_allSetters = ();

my %_allMemberAttributes = ();

BEGIN {
# $_allMembers{_TYPE} = 1; # - WHAT IS THIS FOR?
$_allMemberAttributes{recordsToCrawl} = {
          'ref' => 'ARRAY',
          'name' => 'recordsToCrawl',
          'description' => 'Array objects to crawl'
        }
;
$_allSetters{recordsToCrawl} = \&setRecordsToCrawl;
$_allMemberAttributes{username} = {
          'name' => 'username',
          'description' => 'username for crawl site (if required)'
        }
;
$_allSetters{username} = \&setUsername;
$_allMemberAttributes{password} = {
          'name' => 'password',
          'description' => 'password for crawl site (if required)'
        }
;
$_allSetters{password} = \&setPassword;
$_allMemberAttributes{loginURL} = {
          'name' => 'loginURL',
          'description' => 'url for login (if required)'
        }
;
$_allSetters{loginURL} = \&setLoginURL;
$_allMemberAttributes{cookies} = {
          'ref' => 'HTTP::Cookies',
          'name' => 'cookies',
          'description' => 'an HTML::Cookies cookie jar'
        }
;
$_allSetters{cookies} = \&setCookies;
$_allMemberAttributes{mechHandle} = {
          'ref' => 'WWW::Mechanize',
          'name' => 'mechHandle',
          'description' => 'a WWW::Mechanize handle'
        }
;
$_allSetters{mechHandle} = \&setMechHandle;
$_allMemberAttributes{debug} = {
          'name' => 'debug',
          'description' => 'debug allows an object to specify its debugPrint level'
        }
;
$_allSetters{debug} = \&setDebug;


}

#
# TODO ... needs to merge in the parents attributes; the commented out block is close.
#
sub getReflectionAPI { 
#     my $this = shift; 
#     my %unified = (%{$this->SUPER::getReflectionAPI()}, %_allMemberAttributes);
#     \%unified;
    \%_allMemberAttributes;
}

#
# For some (currently) mysterious reason on perl 5.8.8 on the Linux kernel 2.6.18-8.1.14.el5 there
# is no data in the %_allMemberAttributes.  Therefore here is another way to get a list of member data
# out of the class.
#

sub getMembers {
    my $this = shift;
    my @ret = keys(%{$this});
    \@ret;
}
    
sub new {
    my Crawler::CrawlerBase $this = shift;

    print STDERR "in Crawler::CrawlerBase::new(" . join (",", @_) . ")\n" if $ENV{DEBUG};
    Confess "Missing the value for an argument (even nulls) on creation of Crawler::CrawlerBase" if scalar @_ % 2 != 0;

    my %args = @_;

    unless (ref $this) {
	$this = fields::new($this);
    }

    #
    # This next block tries to set any of the values that you passed into this
    # constructor. You might have said new X( arg1 => 123, arg2 => 456); It is going
    # to take that and try to call setArg1(123), setArg2(123). I.e. it is going
    # to derive the setter for your named argument (by upper casing the first letter
    # of your argument name) and then if it finds that the object can call the
    # setter (i.e. it is defined in this class or any parent class) it will call it.
    #
    # If the setter cannot be found - then assume that this is a bad argument
    # that was passed to the function and die with that information.
    #
    foreach my $key (keys(%args)) {

        my $setterName = $key;                              # workspace for determining the name of the setter
        $setterName =~ s/^(\w)/uc($1)/e;                    # uc the first char of the argument name. I.e. arg1 => Arg1.
        $setterName = "set" . $setterName;                  # prepend "set" to the uppercased argument name.

        if (my $fn = $this->UNIVERSAL::can($setterName)) {  # test that the object can call this function
            $fn->($this,$args{$key});                       # and call it
        } else {                                            # else fail with an error. 
            Confess "Field named \"$key\" is not defined in object Crawler::CrawlerBase. typo ?\n";
        }
    }



    #### __new is the magic "pre-constructor".  You can intercept a call to the parent
    #### constructor by defining a __new() procedure in your class.

    eval {Crawler::CrawlerBase::__new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?Crawler::CrawlerBase::__new/;

    #### Now call the parent constructor, if any.

    eval {$this->SUPER::new(%args)};

    croak $@ if $@
	and $@ !~ /^Can\'t locate object method/;

    ####
    #### Typically this following contains your "real" constructor"
    #### so if you are debugging this next call my be a good candidate to step into.
    ####

    eval {Crawler::CrawlerBase::_new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?Crawler::CrawlerBase::_new/;

    $this;
}

###  END GENERATED CODE

=pod

=head1 MEMBERS AND MEMBER ACCESS METHODS

=cut



=pod

=head2 recordsToCrawl => ARRAY

Array objects to crawl

=cut

sub getRecordsToCrawl {

=pod

=head3 $CrawlerBase->getRecordsToCrawl ()


getter for member recordsToCrawl

=cut

    my $this = shift;





    return $this->{recordsToCrawl};
}
sub setRecordsToCrawl {

=pod

=head3 $CrawlerBase->setRecordsToCrawl (recordsToCrawl => ARRAY)

 - recordsToCrawl (ARRAY)		 : Array objects to crawl

setter for member recordsToCrawl

=cut

    my $this = shift;


    my $recordsToCrawl = shift;
        if (defined $recordsToCrawl) { Confess "argument 'recordsToCrawl' of method Crawler::CrawlerBase->setRecordsToCrawl() is required to be of reference type ARRAY " unless ref($recordsToCrawl) =~ /^ARRAY/;}



    $this->{recordsToCrawl} = $recordsToCrawl;
    return $recordsToCrawl;
}



=pod

=head2 username => "any string"

username for crawl site (if required)

=cut

sub getUsername {

=pod

=head3 $CrawlerBase->getUsername ()


getter for member username

=cut

    my $this = shift;





    return $this->{username};
}
sub setUsername {

=pod

=head3 $CrawlerBase->setUsername (username => "any string")

 - username ("any string")		 : username for crawl site (if required)

setter for member username

=cut

    my $this = shift;


    my $username = shift;



    $this->{username} = $username;
    return $username;
}



=pod

=head2 password => "any string"

password for crawl site (if required)

=cut

sub getPassword {

=pod

=head3 $CrawlerBase->getPassword ()


getter for member password

=cut

    my $this = shift;





    return $this->{password};
}
sub setPassword {

=pod

=head3 $CrawlerBase->setPassword (password => "any string")

 - password ("any string")		 : password for crawl site (if required)

setter for member password

=cut

    my $this = shift;


    my $password = shift;



    $this->{password} = $password;
    return $password;
}



=pod

=head2 loginURL => "any string"

url for login (if required)

=cut

sub getLoginURL {

=pod

=head3 $CrawlerBase->getLoginURL ()


getter for member loginURL

=cut

    my $this = shift;





    return $this->{loginURL};
}
sub setLoginURL {

=pod

=head3 $CrawlerBase->setLoginURL (loginURL => "any string")

 - loginURL ("any string")		 : url for login (if required)

setter for member loginURL

=cut

    my $this = shift;


    my $loginURL = shift;



    $this->{loginURL} = $loginURL;
    return $loginURL;
}



=pod

=head2 cookies => HTTP::Cookies

an HTML::Cookies cookie jar

=cut

sub getCookies {

=pod

=head3 $CrawlerBase->getCookies ()


getter for member cookies

=cut

    my $this = shift;





    return $this->{cookies};
}
sub setCookies {

=pod

=head3 $CrawlerBase->setCookies (cookies => HTTP::Cookies)

 - cookies (HTTP::Cookies)		 : an HTML::Cookies cookie jar

setter for member cookies

=cut

    my $this = shift;


    my $cookies = shift;
    eval {my $dummy = $cookies->isa("HTTP::Cookies");};Confess "$@\n" . Dumper($cookies) if $@;
    if (defined $cookies) { Confess "argument 'cookies' of method Crawler::CrawlerBase->setCookies() is required to be of reference type HTTP::Cookies, but it looks to be of type " . ref ($cookies)  unless $cookies->isa("HTTP::Cookies");}



    $this->{cookies} = $cookies;
    return $cookies;
}



=pod

=head2 mechHandle => WWW::Mechanize

a WWW::Mechanize handle

=cut

sub getMechHandle {

=pod

=head3 $CrawlerBase->getMechHandle ()


getter for member mechHandle

=cut

    my $this = shift;





    return $this->{mechHandle};
}
sub setMechHandle {

=pod

=head3 $CrawlerBase->setMechHandle (mechHandle => WWW::Mechanize)

 - mechHandle (WWW::Mechanize)		 : a WWW::Mechanize handle

setter for member mechHandle

=cut

    my $this = shift;


    my $mechHandle = shift;
    eval {my $dummy = $mechHandle->isa("WWW::Mechanize");};Confess "$@\n" . Dumper($mechHandle) if $@;
    if (defined $mechHandle) { Confess "argument 'mechHandle' of method Crawler::CrawlerBase->setMechHandle() is required to be of reference type WWW::Mechanize, but it looks to be of type " . ref ($mechHandle)  unless $mechHandle->isa("WWW::Mechanize");}



    $this->{mechHandle} = $mechHandle;
    return $mechHandle;
}



=pod

=head2 debug => "any string"

debug allows an object to specify its debugPrint level

=cut

sub getDebug {

=pod

=head3 $CrawlerBase->getDebug ()


getter for member debug

=cut

    my $this = shift;





    return $this->{debug};
}
sub setDebug {

=pod

=head3 $CrawlerBase->setDebug (debug => "any string")

 - debug ("any string")		 : debug allows an object to specify its debugPrint level

setter for member debug

=cut

    my $this = shift;


    my $debug = shift;



    $this->{debug} = $debug;
    return $debug;
}



=pod

=head1 GENERALIZED OBJECT METHODS 

=cut



=pod

=over 4

=item _require (member1,member2,...,memberN)

will iterate over arguments and validate there is a non null value for each of the listed object members

=back

=cut


sub _require
{
    my $this = shift;
    map { 
	Confess "required member variable $_ not set" unless $this->getProperty($_);
    } (@_);
}

sub debugPrint { 
    my $this = shift;
    my $level = shift;
    Confess 'you\'ve called debugPrint - convert this call to $this->debugPrint()'
	unless ref($this);
    if ($this->{debug} >= $level || $main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

sub debugPrint_s {   # static version of debug print
    my $level = shift;
    if ($main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}

1;

=pod

=head1 NOTES ON THIS DOCUMENTATION

In method signatures a * denotes a required option.

This file was automatically generated from CrawlerBase.pm.m80 by 
bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)


=head1 OBJECT METHODS

=cut



sub _new {

=pod

=head3 $CrawlerBase->_new ()


callback constructor, do not call directly use new() instead

=cut

    my $this = shift;

    Confess "Crawler::CrawlerBase->_new requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;




    do {
	$this->setCookies(HTTP::Cookies->new(file => 'cookie',autosave => 1));
	my $mech = WWW::Mechanize->new(cookie_jar => $this->getCookies(), autocheck => 1);
	$this->setMechHandle($mech);

	my $loginURL = $this->getLoginURL();

	if ($loginURL) {
	    my $uri = URI->new( $loginURL );
	    $this->setLoginURL($uri);
	    $mech->get($uri);
	    Confess "fetch of $loginURL failed: " . $mech->response->status_line unless $mech->success;
	    $this->debugPrint (1, "logging into $loginURL");
	    $this->login();
	    $this->debugPrint (1, "logged into $loginURL");
	} else {
	    $this->debugPrint (0, "skipping login as no loginURL set");
	}

    };
}


################################################################################

sub crawlAll {
   
=pod

=head3 $CrawlerBase->crawlAll ()


runs through all of the recordsToCrawl, and executes the crawl method on them

=cut

    my $this = shift;

    Confess "Crawler::CrawlerBase->crawlAll requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



    do {
	foreach my $crawlerRequest (@{$this->getRecordsToCrawl()}) {
	    $this->crawl(request => $crawlerRequest);
	}
    };
}


################################################################################


sub failMsg { "failed to open $_[0]: $_[1]" }


########################################
########################################

use Carp qw(longmess);


sub crawl {
   
=pod

=head3 $CrawlerBase->crawl (request => Crawler::CrawlerRequest*)

 - request (Crawler::CrawlerRequest)		 : data to process

crawl

=cut

    my $this = shift;

    Confess "Crawler::CrawlerBase->crawl requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $request = $args{request};
    Confess "argument 'request' is required for Crawler::CrawlerBase->crawl()" unless exists $args{request};
    eval {my $dummy = $request->isa("Crawler::CrawlerRequest");};Confess "$@\n" . Dumper($request) if $@;
    if (defined $request) { Confess "argument 'request' of method Crawler::CrawlerBase->crawl() is required to be of reference type Crawler::CrawlerRequest, but it looks to be of type " . ref ($request)  unless $request->isa("Crawler::CrawlerRequest");}



    do {
	my $mech = $this->getMechHandle();
	my $url = $request->getURL();
	my $file = $request->getFile();
	$this->debugPrint (0, "fetching " . $url);
	eval {
	    $mech->get( URI->new ($url) );
	};
	if ($@) {
	    Warn (longmess ($@));
	    $this->debugPrint(0,"sadness;  could not fetch $url .... skipping.");
	    return 0;
	} else {
	    $this->debugPrint (0, "finished fetching " . $url);

	    my $content = $this->postProcess(data => $mech->content(),
					     request => $request);
	    
	    
	    open OUT, "> $file"
		|| do {
		    my $s = failMsg($file, $@);
		    $this->setStatus($s);
		    $this->debugPrint (0, $s);
		    return 0;
	    };

	    print OUT $content;
	    close OUT;

	    system ("mkdir -p " . dirname($file));
	    Confess "cannot create directory " . dirname($file)
		if ($? ne 0);
	    
	    open URL, "> $file" . ".url" || do {
		my $s = failMsg("$file.url", $@);
		unlink($file);                                                      # don't really want this lying around.
		$this->setStatus($s);
		$this->debugPrint (0, $s);
		return 0;
	    };

	    $this->debugPrint (1, "writing $url to $file.url");
	    
	    print URL "$url\n";
	    close URL;
	    1;
	}
    };
}


################################################################################

sub postProcess {
    
=pod

=head3 $CrawlerBase->postProcess (data => "any string"*, request => Crawler::CrawlerRequest*)

 - data ("any string")		 : data to process
 - request (Crawler::CrawlerRequest)		 : data to process

override this method to implement a postprocess method for the WWW::Mechanize output

=cut

    my $this = shift;

    Confess "Crawler::CrawlerBase->postProcess requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $data = $args{data};
    Confess "argument 'data' is required for Crawler::CrawlerBase->postProcess()" unless exists $args{data};
    my $request = $args{request};
    Confess "argument 'request' is required for Crawler::CrawlerBase->postProcess()" unless exists $args{request};
    eval {my $dummy = $request->isa("Crawler::CrawlerRequest");};Confess "$@\n" . Dumper($request) if $@;
    if (defined $request) { Confess "argument 'request' of method Crawler::CrawlerBase->postProcess() is required to be of reference type Crawler::CrawlerRequest, but it looks to be of type " . ref ($request)  unless $request->isa("Crawler::CrawlerRequest");}



    do {
	$data;
    };
}

