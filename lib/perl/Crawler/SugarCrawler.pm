


=pod

=head1 NAME - Crawler::SugarCrawler

SugarCrawler description; stub description please expand

=head1 EXAMPLE


    my $SugarCrawler = $SugarCrawler->new();   # stub example .... expand


=cut

# This file was automatically generated from SugarCrawler.pm.m80 by 
# bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)
# DO NOT EDIT THIS FILE 


package Crawler::SugarCrawler;

use Carp;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use strict;
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, @_, RESET }

use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}


use base qw(Crawler::CrawlerBase);

=pod

=head1 INHERITANCE

Crawler::SugarCrawler extends class Crawler::CrawlerBase ; refer to the documentation for that object for member variables and methods.

=cut

use fields qw( );

=pod

=head1 CONSTRUCTOR

=over 4

=item Crawler::SugarCrawler->new()

initializes on object of type Crawler::SugarCrawler

=back

=cut


# %_allSetters - an array of all setters for all members of the class
my %_allSetters = ();

my %_allMemberAttributes = ();

BEGIN {
# $_allMembers{_TYPE} = 1; # - WHAT IS THIS FOR?


}

#
# TODO ... needs to merge in the parents attributes; the commented out block is close.
#
sub getReflectionAPI { 
#     my $this = shift; 
#     my %unified = (%{$this->SUPER::getReflectionAPI()}, %_allMemberAttributes);
#     \%unified;
    \%_allMemberAttributes;
}

#
# For some (currently) mysterious reason on perl 5.8.8 on the Linux kernel 2.6.18-8.1.14.el5 there
# is no data in the %_allMemberAttributes.  Therefore here is another way to get a list of member data
# out of the class.
#

sub getMembers {
    my $this = shift;
    my @ret = keys(%{$this});
    \@ret;
}
    
sub new {
    my Crawler::SugarCrawler $this = shift;

    print STDERR "in Crawler::SugarCrawler::new(" . join (",", @_) . ")\n" if $ENV{DEBUG};
    Confess "Missing the value for an argument (even nulls) on creation of Crawler::SugarCrawler" if scalar @_ % 2 != 0;

    my %args = @_;

    unless (ref $this) {
	$this = fields::new($this);
    }

    #
    # This next block tries to set any of the values that you passed into this
    # constructor. You might have said new X( arg1 => 123, arg2 => 456); It is going
    # to take that and try to call setArg1(123), setArg2(123). I.e. it is going
    # to derive the setter for your named argument (by upper casing the first letter
    # of your argument name) and then if it finds that the object can call the
    # setter (i.e. it is defined in this class or any parent class) it will call it.
    #
    # If the setter cannot be found - then assume that this is a bad argument
    # that was passed to the function and die with that information.
    #
    foreach my $key (keys(%args)) {

        my $setterName = $key;                              # workspace for determining the name of the setter
        $setterName =~ s/^(\w)/uc($1)/e;                    # uc the first char of the argument name. I.e. arg1 => Arg1.
        $setterName = "set" . $setterName;                  # prepend "set" to the uppercased argument name.

        if (my $fn = $this->UNIVERSAL::can($setterName)) {  # test that the object can call this function
            $fn->($this,$args{$key});                       # and call it
        } else {                                            # else fail with an error. 
            Confess "Field named \"$key\" is not defined in object Crawler::SugarCrawler. typo ?\n";
        }
    }



    #### __new is the magic "pre-constructor".  You can intercept a call to the parent
    #### constructor by defining a __new() procedure in your class.

    eval {Crawler::SugarCrawler::__new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?Crawler::SugarCrawler::__new/;

    #### Now call the parent constructor, if any.

    eval {$this->SUPER::new(%args)};

    croak $@ if $@
	and $@ !~ /^Can\'t locate object method/;

    ####
    #### Typically this following contains your "real" constructor"
    #### so if you are debugging this next call my be a good candidate to step into.
    ####

    eval {Crawler::SugarCrawler::_new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?Crawler::SugarCrawler::_new/;

    $this;
}

###  END GENERATED CODE

=pod

=head1 MEMBERS AND MEMBER ACCESS METHODS

=cut



=pod

=head1 GENERALIZED OBJECT METHODS 

=cut



=pod

=over 4

=item _require (member1,member2,...,memberN)

will iterate over arguments and validate there is a non null value for each of the listed object members

=back

=cut


sub _require
{
    my $this = shift;
    map { 
	Confess "required member variable $_ not set" unless $this->getProperty($_);
    } (@_);
}

sub debugPrint { 
    my $this = shift;
    my $level = shift;
    Confess 'you\'ve called debugPrint - convert this call to $this->debugPrint()'
	unless ref($this);
    if ($this->{debug} >= $level || $main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

sub debugPrint_s {   # static version of debug print
    my $level = shift;
    if ($main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}

1;

=pod

=head1 NOTES ON THIS DOCUMENTATION

In method signatures a * denotes a required option.

This file was automatically generated from SugarCrawler.pm.m80 by 
bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)


=head1 OBJECT METHODS

=cut



sub _new { 
=pod

=head3 $SugarCrawler->_new ()


callback constructor, do not call directly use new() instead

=cut

    my $this = shift;

    Confess "Crawler::SugarCrawler->_new requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;


 }

################################################################################

sub login {
   
=pod

=head3 $SugarCrawler->login ()


login to the sugar site using the supplied credentials

=cut

    my $this = shift;

    Confess "Crawler::SugarCrawler->login requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



    do {
	my $mech = $this->getMechHandle();
	$mech->form_number( 1 );

	$mech->set_fields(
	    user_name => $this->getUsername(),
	    user_password => $this->getPassword(),
	    );
	$mech->submit();
    };
}

################################################################################

sub _postProcess {
   
=pod

=head3 $SugarCrawler->_postProcess (data => "any string"*, request => Crawler::CrawlerRequest*, module => "any string"*, data => "any string"*)

 - data ("any string")		 : data to process
 - request (Crawler::CrawlerRequest)		 : data to process
 - module ("any string")		 : the sugar module being parsed
 - data ("any string")		 : data to process

postprocess the WWW::Mechanize content before writing it to a file

=cut

    my $this = shift;

    Confess "Crawler::SugarCrawler->_postProcess requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $data = $args{data};
    Confess "argument 'data' is required for Crawler::SugarCrawler->_postProcess()" unless exists $args{data};
    my $request = $args{request};
    Confess "argument 'request' is required for Crawler::SugarCrawler->_postProcess()" unless exists $args{request};
    eval {my $dummy = $request->isa("Crawler::CrawlerRequest");};Confess "$@\n" . Dumper($request) if $@;
    if (defined $request) { Confess "argument 'request' of method Crawler::SugarCrawler->_postProcess() is required to be of reference type Crawler::CrawlerRequest, but it looks to be of type " . ref ($request)  unless $request->isa("Crawler::CrawlerRequest");}
    my $module = $args{module};
    Confess "argument 'module' is required for Crawler::SugarCrawler->_postProcess()" unless exists $args{module};
    my $data = $args{data};
    Confess "argument 'data' is required for Crawler::SugarCrawler->_postProcess()" unless exists $args{data};



    do {
	$this->debugPrint (1, "in Crawler::SugarCrawler::postprocess");

	my %dataSet = %{$request->getDataSet()};
	my $dataSetIndex = $request->getDataSetIndex();

	my $recordIdentifier = $request->getRecordIdentifier();

	$this->debugPrint(0, "recordIdentifier is  $recordIdentifier");

	$data =~ s/(<title>).+?(<\/title>)/$1Sugar $module Record for $recordIdentifier$2/;

	# get rid of last viewed links
	
	$data =~ s/.+?lastViewLink.*//g;
	
	$data;
    };
}
