<: #-*- perl -*-



# $m80path = [{command => "embedperl" }];
use Helpers::PerlObject; 

my $po = Helpers::PerlObject->new (name => "DB::PostgresHandle",
			           isa => 'DB::DBHandle',
                                   include => [],
                                   example =>
q[
    my $DB::PostgresHandle = $DB::PostgresHandle->new();   # stub example .... expand
],
				   description => 'DB::PostgresHandle description; stub description please expand');

$po->setMembers([{name => "schema", 
		  description => "schema"},
                 {name => "database", 
		  description => "database for the db instance to connect to"},
                 {name => "sid", 
		  description => "? - maybe its here"},
		 {name => "port", 
		  format => '\d+',
		  description => "port for the postgres instance to connect to"},]); 

:>
<:= $po->dump(); :>

sub _new {
<:= $po->dumpContract(method => "_new"); :>
    do {
	$this->setDatabase($ENV{$this->getNamespace() . "_DATABASE"});
	$this->setConnectString("dbi:Pg:host=" . $this->getHost() . ";database=" . $this->getDatabase() . ";port=" . $this->getPort() );
	print $this->getConnectString();
	$this->connect();
    };
}


sub DBIPrecisionToGenericPrecision {
   <:= $po->contract('DBIPrecisionToGenericPrecision' => {description => 'SQL Server "Length" doesn\'t conform to the standard used by Oracle or Mysql.  This is the actual storage size.  So we need to convert this to the bounding used by oracle (which is the number of digits to store).  Fun!  DBHandle contains a default method that just returns the passed in length',
							  getopts => [
								      {name => 'data' ,
								       required => 't',
								       description => 'data to process',},
								      ]}); :>
    do {
	if ($data) {
	    if ($data < 7) {
		return "10";
	    } else {
		return $data + 3;
	    }
	} else {
	    return "10";
	}
    };
}

################################################################################

sub now {
   <:= $po->contract('now' => {description => 'return now',
				      getopts => [
						  ]}); :>
    do {

	my %results = %{$this->getData(sql => "select now() as NOW")};
	return $results{now}[0];
    };
}

################################################################################

sub fetchPrimaryKeyName {
   <:= $po->contract('fetchPrimaryKeyName' => {description => 'attempts to derive the primary key of this table based on DB metadata',
					       getopts => [
							   {name => "name",
							    description => "table name to derive",
							    required =>  1,},
							   {name => 'required' ,
							    description => 'require a result ... throw an error if the primary key can\'t be derived',},
							   ]}); :>
    do {
	my %results = %{$this->getData (sql => "
SELECT 
  n.nspname AS namespace, 
  p1.relname AS table, 
  a1.attname AS column 
FROM 
  pg_constraint c, 
  pg_namespace n, 
  pg_class p1, 
  pg_attribute a1 
WHERE 
  c.contype = 'p' 
AND
  c.connamespace = n.oid 
AND
  c.conrelid = a1.attrelid 
and
  c.conrelid = p1.oid
AND
  a1.attnum = ANY (c.conkey) 
and 
  p1.relname = '" . $name . "'
")};

	Confess "multiple column primary keys not supported" . Dumper(%results)
	    if $results{rows} > 1;

	Confess "no primary key derived"
	    if $required and $results{rows} < 1;

	$this->debugPrint(1, "primary key derived as " .  $results{COLUMN_NAME}[0]);

	$results{COLUMN_NAME}[0];
    };
}

sub tableExists {
   <:= $po->contract('tableExists' => {description => 'returns true if a table exists in this handle',
				      getopts => [
						  {name => 'name' ,
						   required => 't',
						   description => 'name to query for',},
						   ]}); :>
    do {
	my $dbh = $this->getDbh();

	Confess "invalid character $1 in table name $name"
	    if $name =~ /(-|\/)/;

	$this->debugPrint (0, "the next statement may throw an error (which is to be expected)");
	my $stmt;
	eval {
	    my %results = %{$this->getData (sql => "select * from $name where 1 = 0")};
	};
	if ($@) {
	    return undef;
	} else {
	    return 1;
	}
    };
}
