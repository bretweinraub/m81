



=pod

=head1 NAME - DB::MySQLHandle

Wrapper for an MySQL DBIDatabase Handle.

=head1 EXAMPLE

No example(s) have been documented for this object.

=cut

# This file was automatically generated from MySQLHandle.pm.m80 by 
# bret on ubuntu (Linux ubuntu 2.6.31-19-generic-pae #56-Ubuntu SMP Thu Jan 28 02:29:51 UTC 2010 i686 GNU/Linux)
# DO NOT EDIT THIS FILE 


package DB::MySQLHandle;

use Carp;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use strict;
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, @_, RESET }

use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}

use DBI;

use base qw(DB::DBHandle);

=pod

=head1 INHERITANCE

DB::MySQLHandle extends class DB::DBHandle ; refer to the documentation for that object for member variables and methods.

=cut

use fields qw( port database debug );

=pod

=head1 CONSTRUCTOR

=over 4

=item DB::MySQLHandle->new()

initializes on object of type DB::MySQLHandle

=back

=cut


# %_allSetters - an array of all setters for all members of the class
my %_allSetters = ();

my %_allMemberAttributes = ();

BEGIN {
# $_allMembers{_TYPE} = 1; # - WHAT IS THIS FOR?
$_allMemberAttributes{port} = {
          'format' => '\\d+',
          'name' => 'port',
          'description' => 'port for the db instance to connect to'
        }
;
$_allSetters{port} = \&setPort;
$_allMemberAttributes{database} = {
          'name' => 'database',
          'description' => 'database for the db instance to connect to'
        }
;
$_allSetters{database} = \&setDatabase;
$_allMemberAttributes{debug} = {
          'name' => 'debug',
          'description' => 'debug allows an object to specify its debugPrint level'
        }
;
$_allSetters{debug} = \&setDebug;


}

#
# TODO ... needs to merge in the parents attributes; the commented out block is close.
#
sub getReflectionAPI { 
#     my $this = shift; 
#     my %unified = (%{$this->SUPER::getReflectionAPI()}, %_allMemberAttributes);
#     \%unified;
    \%_allMemberAttributes;
}

#
# For some (currently) mysterious reason on perl 5.8.8 on the Linux kernel 2.6.18-8.1.14.el5 there
# is no data in the %_allMemberAttributes.  Therefore here is another way to get a list of member data
# out of the class.
#

sub getMembers {
    my $this = shift;
    my @ret = keys(%{$this});
    \@ret;
}
    
sub new {
    my DB::MySQLHandle $this = shift;

    print STDERR "in DB::MySQLHandle::new(" . join (",", @_) . ")\n" if $ENV{DEBUG};
    Confess "Missing the value for an argument (even nulls) on creation of DB::MySQLHandle" if scalar @_ % 2 != 0;

    my %args = @_;

    unless (ref $this) {
	$this = fields::new($this);
    }

    #
    # This next block tries to set any of the values that you passed into this
    # constructor. You might have said new X( arg1 => 123, arg2 => 456); It is going
    # to take that and try to call setArg1(123), setArg2(123). I.e. it is going
    # to derive the setter for your named argument (by upper casing the first letter
    # of your argument name) and then if it finds that the object can call the
    # setter (i.e. it is defined in this class or any parent class) it will call it.
    #
    # If the setter cannot be found - then assume that this is a bad argument
    # that was passed to the function and die with that information.
    #
    foreach my $key (keys(%args)) {

        my $setterName = $key;                              # workspace for determining the name of the setter
        $setterName =~ s/^(\w)/uc($1)/e;                    # uc the first char of the argument name. I.e. arg1 => Arg1.
        $setterName = "set" . $setterName;                  # prepend "set" to the uppercased argument name.

        if (my $fn = $this->UNIVERSAL::can($setterName)) {  # test that the object can call this function
            $fn->($this,$args{$key});                       # and call it
        } else {                                            # else fail with an error. 
            Confess "Field named \"$key\" is not defined in object DB::MySQLHandle. typo ?\n";
        }
    }



    #### __new is the magic "pre-constructor".  You can intercept a call to the parent
    #### constructor by defining a __new() procedure in your class.

    eval {DB::MySQLHandle::__new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?DB::MySQLHandle::__new/;

    #### Now call the parent constructor, if any.

    eval {$this->SUPER::new(%args)};

    croak $@ if $@
	and $@ !~ /^Can\'t locate object method/;

    ####
    #### Typically this following contains your "real" constructor"
    #### so if you are debugging this next call my be a good candidate to step into.
    ####

    eval {DB::MySQLHandle::_new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?DB::MySQLHandle::_new/;

    $this;
}

###  END GENERATED CODE

=pod

=head1 MEMBERS AND MEMBER ACCESS METHODS

=cut



=pod

=head2 port => "\d+"

port for the db instance to connect to

=cut

sub getPort {

=pod

=head3 $MySQLHandle->getPort ()


getter for member port

=cut

    my $this = shift;





    return $this->{port};
}
sub setPort {

=pod

=head3 $MySQLHandle->setPort (port => "\d+")

 - port ("\d+")		 : port for the db instance to connect to

setter for member port

=cut

    my $this = shift;


    my $port = shift;
        if (defined $port) { Confess "argument 'port' of method DB::MySQLHandle->setPort() failed format validation of '\d+'" unless $port =~ /\d+/;}



    $this->{port} = $port;
    return $port;
}



=pod

=head2 database => "any string"

database for the db instance to connect to

=cut

sub getDatabase {

=pod

=head3 $MySQLHandle->getDatabase ()


getter for member database

=cut

    my $this = shift;





    return $this->{database};
}
sub setDatabase {

=pod

=head3 $MySQLHandle->setDatabase (database => "any string")

 - database ("any string")		 : database for the db instance to connect to

setter for member database

=cut

    my $this = shift;


    my $database = shift;



    $this->{database} = $database;
    return $database;
}



=pod

=head2 debug => "any string"

debug allows an object to specify its debugPrint level

=cut

sub getDebug {

=pod

=head3 $MySQLHandle->getDebug ()


getter for member debug

=cut

    my $this = shift;





    return $this->{debug};
}
sub setDebug {

=pod

=head3 $MySQLHandle->setDebug (debug => "any string")

 - debug ("any string")		 : debug allows an object to specify its debugPrint level

setter for member debug

=cut

    my $this = shift;


    my $debug = shift;



    $this->{debug} = $debug;
    return $debug;
}



=pod

=head1 GENERALIZED OBJECT METHODS 

=cut



=pod

=over 4

=item _require (member1,member2,...,memberN)

will iterate over arguments and validate there is a non null value for each of the listed object members

=back

=cut


sub _require
{
    my $this = shift;
    map { 
	Confess "required member variable $_ not set" unless $this->getProperty($_);
    } (@_);
}

sub debugPrint { 
    my $this = shift;
    my $level = shift;
    Confess 'you\'ve called debugPrint - convert this call to $this->debugPrint()'
	unless ref($this);
    if ($this->{debug} >= $level || $main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

sub debugPrint_s {   # static version of debug print
    my $level = shift;
    if ($main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}

1;

=pod

=head1 NOTES ON THIS DOCUMENTATION

In method signatures a * denotes a required option.

This file was automatically generated from MySQLHandle.pm.m80 by 
bret on ubuntu (Linux ubuntu 2.6.31-19-generic-pae #56-Ubuntu SMP Thu Jan 28 02:29:51 UTC 2010 i686 GNU/Linux)


=head1 OBJECT METHODS

=cut



sub _new {
    
=pod

=head3 $MySQLHandle->_new ()


callback constructor, do not call directly use new() instead

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->_new requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;




    if ($this->getNamespace()) {
	$this->setUser($ENV{$this->getNamespace() . "_USER"});
	$this->setPassword($ENV{$this->getNamespace() . "_PASSWD"});
	$this->setDatabase($ENV{$this->getNamespace() . "_DATABASE"});
	$this->setHost($ENV{$this->getNamespace() . "_HOST"});
	$this->setPort($ENV{$this->getNamespace() . "_PORT"});
    }
    Confess "required member variable DATABASE not set" unless $this->getDatabase();

    $this->setConnectString("dbi:mysql:host=" . $this->getHost() . ";database=" . $this->getDatabase() . ";port=" . $this->getPort() );
    $this->connect();
}


################################################################################

sub SQLAlterString {
   
=pod

=head3 $MySQLHandle->SQLAlterString (data => "any string"*)

 - data ("any string")		 : data to process

for alter statements, some DBS like MySQL want certain strings in backquoutes

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->SQLAlterString requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $data = $args{data};
    Confess "argument 'data' is required for DB::MySQLHandle->SQLAlterString()" unless exists $args{data};



    do {
	"`" . $data . "`";
    };
}

################################################################################

sub getTypeAsText {
   
=pod

=head3 $MySQLHandle->getTypeAsText (data => DB::FieldMetaData*, full => "any string", fixedLength => "any string")

 - data (DB::FieldMetaData)		 : data to process
 - full ("any string")		 : return a full SQL create statement worthy string
 - fixedLength ("any string")		 : force column length based on this argument

return the type variable as a text field

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->getTypeAsText requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $data = $args{data};
    Confess "argument 'data' is required for DB::MySQLHandle->getTypeAsText()" unless exists $args{data};
    eval {my $dummy = $data->isa("DB::FieldMetaData");};Confess "$@\n" . Dumper($data) if $@;
    if (defined $data) { Confess "argument 'data' of method DB::MySQLHandle->getTypeAsText() is required to be of reference type DB::FieldMetaData, but it looks to be of type " . ref ($data)  unless $data->isa("DB::FieldMetaData");}
    my $full = $args{full};
    my $fixedLength = $args{fixedLength};



    do {
	my $type = $data->getType();
	if ($type == 12) {
	    return "VARCHAR". ($full ? "(" . ($fixedLength ? $fixedLength : $data->getPrecision()) . ")" : "") ;
	} elsif ($type == 8 or $type == 7) {
	    return "FLOAT";
	} elsif ($type == 3) {
	    return "DECIMAL";
	} elsif ($type == 93 or $type == 11) {
	    return "DATETIME";
	} else {
	    Confess "field type $type not implemented";
	}
    };
}


################################################################################

sub getMDHandle {
   
=pod

=head3 $MySQLHandle->newHandle ()


spins off a new DB handle for a different database or schema

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->newHandle requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



    do {
	return DB::MySQLHandle->new(user => $this->getUser(),
				    password => $this->getPassword(),
				    database => "mysql",
				    host => $this->getHost(),
				    port => $this->getPort());
    };
}


################################################################################

sub getDefaultDateFormat {
   
=pod

=head3 $MySQLHandle->getDefaultDateFormat ()


returns the default date format for this RDBMS

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->getDefaultDateFormat requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



    do {
	'YYYY-MM-DD HH24:MI:SS';
    };
}


################################################################################

sub getSmallDateFormat {
   
=pod

=head3 $MySQLHandle->getSmallDateFormat ()


for mysql DATE fields (no time), this is the default date format

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->getSmallDateFormat requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



    "YYYY-MM-DD";
}


################################################################################

sub stringToDate {
   
=pod

=head3 $MySQLHandle->stringToDate (data => "any string"*)

 - data ("any string")		 : data to process

convert a date string into SQL ready date format

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->stringToDate requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $data = $args{data};
    Confess "argument 'data' is required for DB::MySQLHandle->stringToDate()" unless exists $args{data};



    do {
	return "\'" . $data . "\'";
    };
}

sub fetchPrimaryKeyName {
   
=pod

=head3 $MySQLHandle->fetchPrimaryKeyName (name => "any string"*, required => "any string")

 - name ("any string")		 : table name to derive
 - required ("any string")		 : require a result ... throw an error if the primary key can't be derived

attempts to derive the primary key of this table based on DB metadata

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->fetchPrimaryKeyName requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $name = $args{name};
    Confess "argument 'name' is required for DB::MySQLHandle->fetchPrimaryKeyName()" unless exists $args{name};
    my $required = $args{required};



    do {
	my %results = %{$this->getData (sql => "
select	column_name 
from 	INFORMATION_SCHEMA.key_column_usage 
where 	constraint_name = 'PRIMARY' 
and 	lower(TABLE_NAME) = lower('$name')")};

	Confess "multiple column primary keys not supported" . Dumper(%results)
	    if $results{rows} > 1;

	Confess "no primary key derived"
	    if $required and $results{rows} < 1;

	$this->debugPrint(1, "primary key derived as " .  $results{column_name}[0]);

	$results{column_name}[0];
    };
}

# select column_name from INFORMATION_SCHEMA.key_column_usage where constraint_name =  'PRIMARY' and TABLE_NAME = 'accounts';


sub inlineViewModifier {
   
=pod

=head3 $MySQLHandle->inlineViewModifier ()


when creating an inline view and naming, it can be required by some RDBMS(like mysql) to use an "as"

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->inlineViewModifier requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



    do {
	" as ";
    };
}

################################################################################

sub dateSelector {
   
=pod

=head3 $MySQLHandle->dateSelector (data => "any string"*)

 - data ("any string")		 : data to process

When selecting a date from this database, produces an  approriate formatting string.

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->dateSelector requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $data = $args{data};
    Confess "argument 'data' is required for DB::MySQLHandle->dateSelector()" unless exists $args{data};



    do {
	"$data";
    };
}


################################################################################

sub tableExists {
   
=pod

=head3 $MySQLHandle->tableExists (name => "any string"*)

 - name ("any string")		 : name to query for

returns true if a table exists.

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->tableExists requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $name = $args{name};
    Confess "argument 'name' is required for DB::MySQLHandle->tableExists()" unless exists $args{name};



    do {
	eval {
	    $this->execute(sql => "select * from $name LIMIT 1");
	};
	if ("$@") {
	    return 0;
	} else {
	    return 1;
	}
    };
}

################################################################################

sub createTable {
    
=pod

=head3 $MySQLHandle->createTable (name => "any string"*, columns => HASH*, columnNameTranslators => "any string", prefixDateColumns => "any string", instantiationTable => "any string", noexec => "any string", drop => "any string", suppressM80 => "any string")

 - name ("any string")		 : table name to create
 - columns (HASH)		 : hash of column records for the generated table
 - columnNameTranslators ("any string")		 : translation description for column names that need to be converted
 - prefixDateColumns ("any string")		 : text to prefix to generated data columns
 - instantiationTable ("any string")		 : do not generate alternate key .... AKA 'instantiation' of an object
 - noexec ("any string")		 : print but do not execute
 - drop ("any string")		 : attempt to drop existing objects
 - suppressM80 ("any string")		 : don't add in the m80 magic columns

generates a database table, maybe with m80 extensions

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->createTable requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $name = $args{name};
    Confess "argument 'name' is required for DB::MySQLHandle->createTable()" unless exists $args{name};
    my $columns = $args{columns};
    Confess "argument 'columns' is required for DB::MySQLHandle->createTable()" unless exists $args{columns};
        if (defined $columns) { Confess "argument 'columns' of method DB::MySQLHandle->createTable() is required to be of reference type HASH " unless ref($columns) =~ /^HASH/;}
    my $columnNameTranslators = $args{columnNameTranslators};
    my $prefixDateColumns = $args{prefixDateColumns};
    my $instantiationTable = $args{instantiationTable};
    my $noexec = $args{noexec};
    my $drop = $args{drop};
    my $suppressM80 = $args{suppressM80};



    do {
	my $sql = "create table $name (\n";

	$suppressM80 = 1;

	$this->debugPrint (1, "creating " . ($suppressM80 ? "non" : "" ) . " m80 table $name");

	# add primary key 

	my $numColumns = 0;

	unless ($suppressM80) {
	    $sql .= "\t$name" . "_id number(10) not null";
	    $numColumns++;
	}

	my %columns = %{$columns};

	foreach my $columnName (keys(%columns)) {
	    $this->debugPrint (2, "processing column name $columnName");
	    my $newColumn = $this->getTypeAsText(data => $columns{$columnName},
						 full => 't');
	    $this->debugPrint (2, "found $columnName: $newColumn");
	    $sql .= ($numColumns++ ? ",\n" : "") . 
		$this->validColumnName(data => $columnName, 
				       columnNameTranslators => $columnNameTranslators) . "\t\t\t$newColumn";
	}
	
	unless ($suppressM80) {
	    $sql .= ",\n";
	    $sql .= $prefixDateColumns . "INSERTED_DT date not null,\n";
	    $sql .= $prefixDateColumns . "UPDATED_DT date ,\n";
	    $sql .= "constraint $name" . "_pk primary key ($name" .  "_id)";
	}

	$sql .= ")";

	$this->debugPrint (0, "preparing to create table $name");
	$this->debugPrint (2, " sql statement is $sql");

	return if $noexec;

	$this->dropTable(name => "$name") if $drop;

	$this->execute(sql => $sql);

	unless ($suppressM80) {
	    $this->PLSQLBlock (sql => "drop sequence $name" . "_s",
			       ignore => ArrayRef(-2289)) if $drop;
	    $this->PLSQLBlock (sql => "create sequence $name" . "_S increment by 5 start with 1",
			       ignore => ArrayRef(-955));
	    $this->createM80Triggers(name => $name,
				     prefixDateColumns => $prefixDateColumns);
	}
	$this->debugPrint (0, "created table $name");

    };
}


################################################################################

sub maxColumnLength {
   
=pod

=head3 $MySQLHandle->maxColumnLength ()


returns the maximum column length for this DBHandle

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->maxColumnLength requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



    50;
}

################################################################################

sub getDateData {
   
=pod

=head3 $MySQLHandle->getDateData (table => "any string"*, field => "any string"*, function => "any string"*, fmt => "any string"*)

 - table ("any string")		 : table to process
 - field ("any string")		 : field to process
 - function ("any string")		 : function to process
 - fmt ("any string")		 : how to format results

localizes date data from a table based on a format string

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->getDateData requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $table = $args{table};
    Confess "argument 'table' is required for DB::MySQLHandle->getDateData()" unless exists $args{table};
    my $field = $args{field};
    Confess "argument 'field' is required for DB::MySQLHandle->getDateData()" unless exists $args{field};
    my $function = $args{function};
    Confess "argument 'function' is required for DB::MySQLHandle->getDateData()" unless exists $args{function};
    my $fmt = $args{fmt};
    Confess "argument 'fmt' is required for DB::MySQLHandle->getDateData()" unless exists $args{fmt};



    do {
	return $this->getData (sql => "select $function($field) $field from $table");
    };
}

################################################################################

sub setPrecision {
   
=pod

=head3 $MySQLHandle->setPrecision (columnName => "any string"*, precision => "any string"*, name => "any string"*)

 - columnName ("any string")		 : name of the column to alter
 - precision ("any string")		 : new precision
 - name ("any string")		 : name of the table to alter

modify the precision of a column

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->setPrecision requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $columnName = $args{columnName};
    Confess "argument 'columnName' is required for DB::MySQLHandle->setPrecision()" unless exists $args{columnName};
    my $precision = $args{precision};
    Confess "argument 'precision' is required for DB::MySQLHandle->setPrecision()" unless exists $args{precision};
    my $name = $args{name};
    Confess "argument 'name' is required for DB::MySQLHandle->setPrecision()" unless exists $args{name};



    do {
	my $sql = "alter table $name modify $columnName varchar ($precision)";
	$this->debugPrint(0, $sql);
	$this->execute(sql => $sql);
    };
}

sub validColumnName {
   
=pod

=head3 $MySQLHandle->validColumnName (columnNameTranslators => "any string", data => "any string"*)

 - columnNameTranslators ("any string")		 : translation description for column names that need to be converted
 - data ("any string")		 : data to process

returns a column name that is valid for Oracle

=cut

    my $this = shift;

    Confess "DB::MySQLHandle->validColumnName requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $columnNameTranslators = $args{columnNameTranslators};
    my $data = $args{data};
    Confess "argument 'data' is required for DB::MySQLHandle->validColumnName()" unless exists $args{data};



    do {
	my @cnts = split(/[,\s]+/,$columnNameTranslators);
	if ($data =~ /^(comment|date|precision)$/i) {
	    $data = "$1_"; 
	} 
	foreach my $cnt (@cnts) {
	    my $regex = $ENV{$cnt . "_regex"};
	    my $_pre = $data;
	    eval '$data =~ ' . "$regex ;";
	    $this->debugPrint (0, "converted $_pre to $data")
		if ($_pre != $data);
	}
	substr($data,0,$this->maxColumnLength());
    };
}
