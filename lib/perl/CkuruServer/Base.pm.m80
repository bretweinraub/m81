<: #-*- perl -*-
# $m80path = [{command => "embedperl" }];
use Helpers::PerlObject; 

my $po = Helpers::PerlObject->new (name => "CkuruServer::Base",
			           isa => '',
                                   include => [],
                                   example =>
q[
    my $CkuruServer::Base = $CkuruServer::Base->new();   # stub example .... expand
],
				   description => 'CkuruServer::Base description; stub description please expand');

$po->setMembers([
#                 {name => "filename", 
#		  type => "string", 
#		  required => 1,
#		  format => '([\/\w\d]+)\.uxf',
#		  description => "Name of the document to generate"},
#                 {name => "elements",
#                  ref => 'ARRAY',
#                  description => "Array of UXFElement objects in this document"},
]); 

:>
<:= $po->dump(); :>

sub _new {
<:= $po->dumpContract(method => "_new"); :>
}

sub _options {
  my %ret = @_;
  my $once = 0;
  for my $v (grep { /^-/ } keys %ret) {
    require Carp;
    $once++ or Carp::carp("deprecated use of leading - for options");
    $ret{substr($v,1)} = $ret{$v};
  }

  $ret{control} = [ map { (ref($_) =~ /[^A-Z]/) ? $_->to_asn : $_ } 
		      ref($ret{control}) eq 'ARRAY'
			? @{$ret{control}}
			: $ret{control}
                  ]
    if exists $ret{control};

  \%ret;
}


sub _dn_options {
  unshift @_, 'dn' if @_ & 1;
  &_options;
}

sub setProperty {
    my $this = shift;
    my ($prop, $val) = @_;

    $this->{$prop} = $val;
#
# setPropertyCallback: the routine is called by the setProperty routine in perloo.m4.  It
# allows for custom extensions to that set property routine to be expressed in the supplied subroutine.
# Look in task.pm.m4 for an example of its use.
#
    if ($this->{setPropertyCallback} && ref($this->{setPropertyCallback}) =~ /CODE/) {
	my $callback = $this->{setPropertyCallback};
	&$callback ($this, $prop, $val);
    }
}

sub setProperties {
    my $this = shift;
    my $arg = &_dn_options;
    map {$this->setProperty($_, $arg->{$_});} (keys (%{$arg}));
}
    

sub getProperty {
    $_[0]->{$_[1]};
#     my $this = shift;
#     my ($prop) = @_;

#     return $this->{$prop};
}
