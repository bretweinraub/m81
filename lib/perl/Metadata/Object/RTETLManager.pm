


=pod

=head1 NAME - Metadata::Object::RTETLManager

Metadata::Object::RTETLManager description; stub description please expand

=head1 EXAMPLE


    my $Metadata::Object::RTETLManager = $Metadata::Object::RTETLManager->new();   # stub example .... expand


=cut

# This file was automatically generated from RTETLManager.pm.m80 by 
# bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)
# DO NOT EDIT THIS FILE 


package Metadata::Object::RTETLManager;

use Carp;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use strict;
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, @_, RESET }

use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}


use base qw(Metadata::Object::ETLManager);

=pod

=head1 INHERITANCE

Metadata::Object::RTETLManager extends class Metadata::Object::ETLManager ; refer to the documentation for that object for member variables and methods.

=cut

use fields qw( pollTableList pollInterval insertDateField updateDateField model debug );

=pod

=head1 CONSTRUCTOR

=over 4

=item Metadata::Object::RTETLManager->new()

initializes on object of type Metadata::Object::RTETLManager

=back

=cut


# %_allSetters - an array of all setters for all members of the class
my %_allSetters = ();

my %_allMemberAttributes = ();

BEGIN {
# $_allMembers{_TYPE} = 1; # - WHAT IS THIS FOR?
$_allMemberAttributes{pollTableList} = {
          'required' => 1,
          'name' => 'pollTableList',
          'description' => 'tables to monitor for edits before triggering ETL'
        }
;
$_allSetters{pollTableList} = \&setPollTableList;
$_allMemberAttributes{pollInterval} = {
          'name' => 'pollInterval',
          'default' => 60,
          'description' => 'poller interval in seconds'
        }
;
$_allSetters{pollInterval} = \&setPollInterval;
$_allMemberAttributes{insertDateField} = {
          'required' => 1,
          'name' => 'insertDateField',
          'description' => 'field name that marks inserted records'
        }
;
$_allSetters{insertDateField} = \&setInsertDateField;
$_allMemberAttributes{updateDateField} = {
          'required' => 1,
          'name' => 'updateDateField',
          'description' => 'field name that marks updated records'
        }
;
$_allSetters{updateDateField} = \&setUpdateDateField;
$_allMemberAttributes{model} = {
          'name' => 'model',
          'description' => 'polling model .... potential extension point for custom polling models'
        }
;
$_allSetters{model} = \&setModel;
$_allMemberAttributes{debug} = {
          'name' => 'debug',
          'description' => 'debug allows an object to specify its debugPrint level'
        }
;
$_allSetters{debug} = \&setDebug;


}

#
# TODO ... needs to merge in the parents attributes; the commented out block is close.
#
sub getReflectionAPI { 
#     my $this = shift; 
#     my %unified = (%{$this->SUPER::getReflectionAPI()}, %_allMemberAttributes);
#     \%unified;
    \%_allMemberAttributes;
}

#
# For some (currently) mysterious reason on perl 5.8.8 on the Linux kernel 2.6.18-8.1.14.el5 there
# is no data in the %_allMemberAttributes.  Therefore here is another way to get a list of member data
# out of the class.
#

sub getMembers {
    my $this = shift;
    my @ret = keys(%{$this});
    \@ret;
}
    
sub new {
    my Metadata::Object::RTETLManager $this = shift;

    print STDERR "in Metadata::Object::RTETLManager::new(" . join (",", @_) . ")\n" if $ENV{DEBUG};
    Confess "Missing the value for an argument (even nulls) on creation of Metadata::Object::RTETLManager" if scalar @_ % 2 != 0;

    my %args = @_;

    unless (ref $this) {
	$this = fields::new($this);
    }

    #
    # This next block tries to set any of the values that you passed into this
    # constructor. You might have said new X( arg1 => 123, arg2 => 456); It is going
    # to take that and try to call setArg1(123), setArg2(123). I.e. it is going
    # to derive the setter for your named argument (by upper casing the first letter
    # of your argument name) and then if it finds that the object can call the
    # setter (i.e. it is defined in this class or any parent class) it will call it.
    #
    # If the setter cannot be found - then assume that this is a bad argument
    # that was passed to the function and die with that information.
    #
    foreach my $key (keys(%args)) {

        my $setterName = $key;                              # workspace for determining the name of the setter
        $setterName =~ s/^(\w)/uc($1)/e;                    # uc the first char of the argument name. I.e. arg1 => Arg1.
        $setterName = "set" . $setterName;                  # prepend "set" to the uppercased argument name.

        if (my $fn = $this->UNIVERSAL::can($setterName)) {  # test that the object can call this function
            $fn->($this,$args{$key});                       # and call it
        } else {                                            # else fail with an error. 
            Confess "Field named \"$key\" is not defined in object Metadata::Object::RTETLManager. typo ?\n";
        }
    }


    Confess "cannot initialize object of type Metadata::Object::RTETLManager without required member variable pollTableList"
        unless exists $this->{pollTableList};

    $this->{pollInterval} = "60" unless defined $this->{pollInterval};

    Confess "cannot initialize object of type Metadata::Object::RTETLManager without required member variable insertDateField"
        unless exists $this->{insertDateField};

    Confess "cannot initialize object of type Metadata::Object::RTETLManager without required member variable updateDateField"
        unless exists $this->{updateDateField};


    #### __new is the magic "pre-constructor".  You can intercept a call to the parent
    #### constructor by defining a __new() procedure in your class.

    eval {Metadata::Object::RTETLManager::__new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?Metadata::Object::RTETLManager::__new/;

    #### Now call the parent constructor, if any.

    eval {$this->SUPER::new(%args)};

    croak $@ if $@
	and $@ !~ /^Can\'t locate object method/;

    ####
    #### Typically this following contains your "real" constructor"
    #### so if you are debugging this next call my be a good candidate to step into.
    ####

    eval {Metadata::Object::RTETLManager::_new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?Metadata::Object::RTETLManager::_new/;

    $this;
}

###  END GENERATED CODE

=pod

=head1 MEMBERS AND MEMBER ACCESS METHODS

=cut



=pod

=head2 pollTableList => "any string"*

tables to monitor for edits before triggering ETL

=cut

sub getPollTableList {

=pod

=head3 $Object::RTETLManager->getPollTableList ()


getter for member pollTableList

=cut

    my $this = shift;





    return $this->{pollTableList};
}
sub setPollTableList {

=pod

=head3 $Object::RTETLManager->setPollTableList (pollTableList => "any string"*)

 - pollTableList ("any string")		 : tables to monitor for edits before triggering ETL

setter for member pollTableList

=cut

    my $this = shift;


    my $pollTableList = shift;
    Confess "argument 'pollTableList' is required for Metadata::Object::RTETLManager->setPollTableList()" unless defined $pollTableList;



    $this->{pollTableList} = $pollTableList;
    return $pollTableList;
}



=pod

=head2 pollInterval => "any string" (default: "60")

poller interval in seconds

=cut

sub getPollInterval {

=pod

=head3 $Object::RTETLManager->getPollInterval ()


getter for member pollInterval

=cut

    my $this = shift;





    return $this->{pollInterval};
}
sub setPollInterval {

=pod

=head3 $Object::RTETLManager->setPollInterval (pollInterval => "any string")

 - pollInterval ("any string")		 : poller interval in seconds

setter for member pollInterval

=cut

    my $this = shift;


    my $pollInterval = shift;



    $this->{pollInterval} = $pollInterval;
    return $pollInterval;
}



=pod

=head2 insertDateField => "any string"*

field name that marks inserted records

=cut

sub getInsertDateField {

=pod

=head3 $Object::RTETLManager->getInsertDateField ()


getter for member insertDateField

=cut

    my $this = shift;





    return $this->{insertDateField};
}
sub setInsertDateField {

=pod

=head3 $Object::RTETLManager->setInsertDateField (insertDateField => "any string"*)

 - insertDateField ("any string")		 : field name that marks inserted records

setter for member insertDateField

=cut

    my $this = shift;


    my $insertDateField = shift;
    Confess "argument 'insertDateField' is required for Metadata::Object::RTETLManager->setInsertDateField()" unless defined $insertDateField;



    $this->{insertDateField} = $insertDateField;
    return $insertDateField;
}



=pod

=head2 updateDateField => "any string"*

field name that marks updated records

=cut

sub getUpdateDateField {

=pod

=head3 $Object::RTETLManager->getUpdateDateField ()


getter for member updateDateField

=cut

    my $this = shift;





    return $this->{updateDateField};
}
sub setUpdateDateField {

=pod

=head3 $Object::RTETLManager->setUpdateDateField (updateDateField => "any string"*)

 - updateDateField ("any string")		 : field name that marks updated records

setter for member updateDateField

=cut

    my $this = shift;


    my $updateDateField = shift;
    Confess "argument 'updateDateField' is required for Metadata::Object::RTETLManager->setUpdateDateField()" unless defined $updateDateField;



    $this->{updateDateField} = $updateDateField;
    return $updateDateField;
}



=pod

=head2 model => "any string"

polling model .... potential extension point for custom polling models

=cut

sub getModel {

=pod

=head3 $Object::RTETLManager->getModel ()


getter for member model

=cut

    my $this = shift;





    return $this->{model};
}
sub setModel {

=pod

=head3 $Object::RTETLManager->setModel (model => "any string")

 - model ("any string")		 : polling model .... potential extension point for custom polling models

setter for member model

=cut

    my $this = shift;


    my $model = shift;



    $this->{model} = $model;
    return $model;
}



=pod

=head2 debug => "any string"

debug allows an object to specify its debugPrint level

=cut

sub getDebug {

=pod

=head3 $Object::RTETLManager->getDebug ()


getter for member debug

=cut

    my $this = shift;





    return $this->{debug};
}
sub setDebug {

=pod

=head3 $Object::RTETLManager->setDebug (debug => "any string")

 - debug ("any string")		 : debug allows an object to specify its debugPrint level

setter for member debug

=cut

    my $this = shift;


    my $debug = shift;



    $this->{debug} = $debug;
    return $debug;
}



=pod

=head1 GENERALIZED OBJECT METHODS 

=cut



=pod

=over 4

=item _require (member1,member2,...,memberN)

will iterate over arguments and validate there is a non null value for each of the listed object members

=back

=cut


sub _require
{
    my $this = shift;
    map { 
	Confess "required member variable $_ not set" unless $this->getProperty($_);
    } (@_);
}

sub debugPrint { 
    my $this = shift;
    my $level = shift;
    Confess 'you\'ve called debugPrint - convert this call to $this->debugPrint()'
	unless ref($this);
    if ($this->{debug} >= $level || $main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

sub debugPrint_s {   # static version of debug print
    my $level = shift;
    if ($main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}

1;

=pod

=head1 NOTES ON THIS DOCUMENTATION

In method signatures a * denotes a required option.

This file was automatically generated from RTETLManager.pm.m80 by 
bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)


=head1 OBJECT METHODS

=cut



sub _new {

=pod

=head3 $Object::RTETLManager->_new ()


callback constructor, do not call directly use new() instead

=cut

    my $this = shift;

    Confess "Metadata::Object::RTETLManager->_new requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



    print Dumper($this);
}
