

=pod

=head1 NAME - StateMachine::EventAdapter::Subscriber



This is an Interface definition for subscribers in the StateMachine::EventAdapter model.



=head1 EXAMPLE


This is an interface - An example of implementing it is the StateMachine::EventAdapter::SimpleSubscriber class.


=cut

# This file was automatically generated from Subscriber.pm.m80 by 
# bret on ubuntu (Linux ubuntu 2.6.31-19-generic-pae #56-Ubuntu SMP Thu Jan 28 02:29:51 UTC 2010 i686 GNU/Linux)
# DO NOT EDIT THIS FILE 


package StateMachine::EventAdapter::Subscriber;

use Carp;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use strict;
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, @_, RESET }

use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}

use fields qw( objectType xmlhash hint debug );

=pod

=head1 CONSTRUCTOR

=over 4

=item StateMachine::EventAdapter::Subscriber->new()

initializes on object of type StateMachine::EventAdapter::Subscriber

=back

=cut


# %_allSetters - an array of all setters for all members of the class
my %_allSetters = ();

my %_allMemberAttributes = ();

BEGIN {
# $_allMembers{_TYPE} = 1; # - WHAT IS THIS FOR?
$_allMemberAttributes{objectType} = {
          'name' => 'objectType',
          'description' => 'A MetaDataObject object type (class). Examples are "host", "WLDomain", etc.'
        }
;
$_allSetters{objectType} = \&setObjectType;
$_allMemberAttributes{xmlhash} = {
          'required' => 1,
          'ref' => 'HASH',
          'name' => 'xmlhash',
          'description' => 'The parsed interface block from the XML config file.'
        }
;
$_allSetters{xmlhash} = \&setXmlhash;
$_allMemberAttributes{hint} = {
          'name' => 'hint',
          'description' => 'This hint can be used by the MetaDataObject->getMapperForEventDispatch() method to determine what order to check for mapper data '
        }
;
$_allSetters{hint} = \&setHint;
$_allMemberAttributes{debug} = {
          'name' => 'debug',
          'description' => 'debug allows an object to specify its debugPrint level'
        }
;
$_allSetters{debug} = \&setDebug;


}

#
# TODO ... needs to merge in the parents attributes; the commented out block is close.
#
sub getReflectionAPI { 
#     my $this = shift; 
#     my %unified = (%{$this->SUPER::getReflectionAPI()}, %_allMemberAttributes);
#     \%unified;
    \%_allMemberAttributes;
}

#
# For some (currently) mysterious reason on perl 5.8.8 on the Linux kernel 2.6.18-8.1.14.el5 there
# is no data in the %_allMemberAttributes.  Therefore here is another way to get a list of member data
# out of the class.
#

sub getMembers {
    my $this = shift;
    my @ret = keys(%{$this});
    \@ret;
}
    
sub new {
    my StateMachine::EventAdapter::Subscriber $this = shift;

    print STDERR "in StateMachine::EventAdapter::Subscriber::new(" . join (",", @_) . ")\n" if $ENV{DEBUG};
    Confess "Missing the value for an argument (even nulls) on creation of StateMachine::EventAdapter::Subscriber" if scalar @_ % 2 != 0;

    my %args = @_;

    unless (ref $this) {
	$this = fields::new($this);
    }

    #
    # This next block tries to set any of the values that you passed into this
    # constructor. You might have said new X( arg1 => 123, arg2 => 456); It is going
    # to take that and try to call setArg1(123), setArg2(123). I.e. it is going
    # to derive the setter for your named argument (by upper casing the first letter
    # of your argument name) and then if it finds that the object can call the
    # setter (i.e. it is defined in this class or any parent class) it will call it.
    #
    # If the setter cannot be found - then assume that this is a bad argument
    # that was passed to the function and die with that information.
    #
    foreach my $key (keys(%args)) {

        my $setterName = $key;                              # workspace for determining the name of the setter
        $setterName =~ s/^(\w)/uc($1)/e;                    # uc the first char of the argument name. I.e. arg1 => Arg1.
        $setterName = "set" . $setterName;                  # prepend "set" to the uppercased argument name.

        if (my $fn = $this->UNIVERSAL::can($setterName)) {  # test that the object can call this function
            $fn->($this,$args{$key});                       # and call it
        } else {                                            # else fail with an error. 
            Confess "Field named \"$key\" is not defined in object StateMachine::EventAdapter::Subscriber. typo ?\n";
        }
    }


    Confess "cannot initialize object of type StateMachine::EventAdapter::Subscriber without required member variable xmlhash"
        unless exists $this->{xmlhash};


    #### __new is the magic "pre-constructor".  You can intercept a call to the parent
    #### constructor by defining a __new() procedure in your class.

    eval {StateMachine::EventAdapter::Subscriber::__new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?StateMachine::EventAdapter::Subscriber::__new/;

    #### Now call the parent constructor, if any.

    eval {$this->SUPER::new(%args)};

    croak $@ if $@
	and $@ !~ /^Can\'t locate object method/;

    ####
    #### Typically this following contains your "real" constructor"
    #### so if you are debugging this next call my be a good candidate to step into.
    ####

    eval {StateMachine::EventAdapter::Subscriber::_new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?StateMachine::EventAdapter::Subscriber::_new/;

    $this;
}

###  END GENERATED CODE

=pod

=head1 MEMBERS AND MEMBER ACCESS METHODS

=cut



=pod

=head2 objectType => "any string"

A MetaDataObject object type (class). Examples are "host", "WLDomain", etc.

=cut

sub getObjectType {

=pod

=head3 $EventAdapter::Subscriber->getObjectType ()


getter for member objectType

=cut

    my $this = shift;





    return $this->{objectType};
}
sub setObjectType {

=pod

=head3 $EventAdapter::Subscriber->setObjectType (objectType => "any string")

 - objectType ("any string")		 : A MetaDataObject object type (class). Examples are "host", "WLDomain", etc.

setter for member objectType

=cut

    my $this = shift;


    my $objectType = shift;



    $this->{objectType} = $objectType;
    return $objectType;
}



=pod

=head2 xmlhash => HASH*

The parsed interface block from the XML config file.

=cut

sub getXmlhash {

=pod

=head3 $EventAdapter::Subscriber->getXmlhash ()


getter for member xmlhash

=cut

    my $this = shift;





    return $this->{xmlhash};
}
sub setXmlhash {

=pod

=head3 $EventAdapter::Subscriber->setXmlhash (xmlhash => HASH*)

 - xmlhash (HASH)		 : The parsed interface block from the XML config file.

setter for member xmlhash

=cut

    my $this = shift;


    my $xmlhash = shift;
    Confess "argument 'xmlhash' is required for StateMachine::EventAdapter::Subscriber->setXmlhash()" unless defined $xmlhash;
        if (defined $xmlhash) { Confess "argument 'xmlhash' of method StateMachine::EventAdapter::Subscriber->setXmlhash() is required to be of reference type HASH " unless ref($xmlhash) =~ /^HASH/;}



    $this->{xmlhash} = $xmlhash;
    return $xmlhash;
}



=pod

=head2 hint => "any string"

This hint can be used by the MetaDataObject->getMapperForEventDispatch() method to determine what order to check for mapper data 

=cut

sub getHint {

=pod

=head3 $EventAdapter::Subscriber->getHint ()


getter for member hint

=cut

    my $this = shift;





    return $this->{hint};
}
sub setHint {

=pod

=head3 $EventAdapter::Subscriber->setHint (hint => "any string")

 - hint ("any string")		 : This hint can be used by the MetaDataObject->getMapperForEventDispatch() method to determine what order to check for mapper data 

setter for member hint

=cut

    my $this = shift;


    my $hint = shift;



    $this->{hint} = $hint;
    return $hint;
}



=pod

=head2 debug => "any string"

debug allows an object to specify its debugPrint level

=cut

sub getDebug {

=pod

=head3 $EventAdapter::Subscriber->getDebug ()


getter for member debug

=cut

    my $this = shift;





    return $this->{debug};
}
sub setDebug {

=pod

=head3 $EventAdapter::Subscriber->setDebug (debug => "any string")

 - debug ("any string")		 : debug allows an object to specify its debugPrint level

setter for member debug

=cut

    my $this = shift;


    my $debug = shift;



    $this->{debug} = $debug;
    return $debug;
}



=pod

=head1 GENERALIZED OBJECT METHODS 

=cut



=pod

=over 4

=item _require (member1,member2,...,memberN)

will iterate over arguments and validate there is a non null value for each of the listed object members

=back

=cut


sub _require
{
    my $this = shift;
    map { 
	Confess "required member variable $_ not set" unless $this->getProperty($_);
    } (@_);
}


=pod

=head1 VIRTUAL METHODS

=cut



=pod

=head2 getObjects


The getObjects is passed the @allObjects array (which is relative to the current StateMachine memory space).
This method should take what it knows about the currect subscriber configuration and find all matching objects
in the @allObjects array. It then returns those objects to the caller.


=cut

sub getObjects { croak 'Virtual method getObjects called. This should be implemented in a child class.' }
sub debugPrint { 
    my $this = shift;
    my $level = shift;
    Confess 'you\'ve called debugPrint - convert this call to $this->debugPrint()'
	unless ref($this);
    if ($this->{debug} >= $level || $main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

sub debugPrint_s {   # static version of debug print
    my $level = shift;
    if ($main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}

1;

=pod

=head1 NOTES ON THIS DOCUMENTATION

In method signatures a * denotes a required option.

This file was automatically generated from Subscriber.pm.m80 by 
bret on ubuntu (Linux ubuntu 2.6.31-19-generic-pae #56-Ubuntu SMP Thu Jan 28 02:29:51 UTC 2010 i686 GNU/Linux)


=head1 OBJECT METHODS

=cut




################################################################################

sub getAction {
   
=pod

=head3 $EventAdapter::Subscriber->getAction ()


return an action name if defined in this xml entry

=cut

    my $this = shift;

    Confess "StateMachine::EventAdapter::Subscriber->getAction requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



    do {
	$this->{xmlhash}->{action};
    };
}

