


=pod

=head1 NAME - StateMachine::EventAdapter::XMLFile

Wrapper object for the StateMachine Interface XML Description 

=head1 EXAMPLE


    my $XMLFile = $XMLFile->new();   # stub example .... expand


=cut

# This file was automatically generated from XMLFile.pm.m80 by 
# bret on ubuntu (Linux ubuntu 2.6.31-19-generic-pae #56-Ubuntu SMP Thu Jan 28 02:29:51 UTC 2010 i686 GNU/Linux)
# DO NOT EDIT THIS FILE 


package StateMachine::EventAdapter::XMLFile;

use Carp;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use strict;
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, @_, RESET }

use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}

use StateMachine::EventAdapter::Interface;
use fields qw( filename filetype xml interfaces debug );

=pod

=head1 CONSTRUCTOR

=over 4

=item StateMachine::EventAdapter::XMLFile->new()

initializes on object of type StateMachine::EventAdapter::XMLFile

=back

=cut


# %_allSetters - an array of all setters for all members of the class
my %_allSetters = ();

my %_allMemberAttributes = ();

BEGIN {
# $_allMembers{_TYPE} = 1; # - WHAT IS THIS FOR?
$_allMemberAttributes{filename} = {
          'required' => 1,
          'name' => 'filename',
          'type' => 'string',
          'description' => 'Path to the file representing this StateMachineInterface XML information'
        }
;
$_allSetters{filename} = \&setFilename;
$_allMemberAttributes{filetype} = {
          'name' => 'filetype',
          'description' => 'one of (xml|perl)'
        }
;
$_allSetters{filetype} = \&setFiletype;
$_allMemberAttributes{xml} = {
          'ref' => 'HASH',
          'name' => 'xml',
          'description' => 'the converted XML in a hash reference'
        }
;
$_allSetters{xml} = \&setXml;
$_allMemberAttributes{interfaces} = {
          'ref' => 'HASH',
          'name' => 'interfaces',
          'description' => 'hash table of all interface references'
        }
;
$_allSetters{interfaces} = \&setInterfaces;
$_allMemberAttributes{debug} = {
          'name' => 'debug',
          'description' => 'debug allows an object to specify its debugPrint level'
        }
;
$_allSetters{debug} = \&setDebug;


}

#
# TODO ... needs to merge in the parents attributes; the commented out block is close.
#
sub getReflectionAPI { 
#     my $this = shift; 
#     my %unified = (%{$this->SUPER::getReflectionAPI()}, %_allMemberAttributes);
#     \%unified;
    \%_allMemberAttributes;
}

#
# For some (currently) mysterious reason on perl 5.8.8 on the Linux kernel 2.6.18-8.1.14.el5 there
# is no data in the %_allMemberAttributes.  Therefore here is another way to get a list of member data
# out of the class.
#

sub getMembers {
    my $this = shift;
    my @ret = keys(%{$this});
    \@ret;
}
    
sub new {
    my StateMachine::EventAdapter::XMLFile $this = shift;

    print STDERR "in StateMachine::EventAdapter::XMLFile::new(" . join (",", @_) . ")\n" if $ENV{DEBUG};
    Confess "Missing the value for an argument (even nulls) on creation of StateMachine::EventAdapter::XMLFile" if scalar @_ % 2 != 0;

    my %args = @_;

    unless (ref $this) {
	$this = fields::new($this);
    }

    #
    # This next block tries to set any of the values that you passed into this
    # constructor. You might have said new X( arg1 => 123, arg2 => 456); It is going
    # to take that and try to call setArg1(123), setArg2(123). I.e. it is going
    # to derive the setter for your named argument (by upper casing the first letter
    # of your argument name) and then if it finds that the object can call the
    # setter (i.e. it is defined in this class or any parent class) it will call it.
    #
    # If the setter cannot be found - then assume that this is a bad argument
    # that was passed to the function and die with that information.
    #
    foreach my $key (keys(%args)) {

        my $setterName = $key;                              # workspace for determining the name of the setter
        $setterName =~ s/^(\w)/uc($1)/e;                    # uc the first char of the argument name. I.e. arg1 => Arg1.
        $setterName = "set" . $setterName;                  # prepend "set" to the uppercased argument name.

        if (my $fn = $this->UNIVERSAL::can($setterName)) {  # test that the object can call this function
            $fn->($this,$args{$key});                       # and call it
        } else {                                            # else fail with an error. 
            Confess "Field named \"$key\" is not defined in object StateMachine::EventAdapter::XMLFile. typo ?\n";
        }
    }


    Confess "cannot initialize object of type StateMachine::EventAdapter::XMLFile without required member variable filename"
        unless exists $this->{filename};


    #### __new is the magic "pre-constructor".  You can intercept a call to the parent
    #### constructor by defining a __new() procedure in your class.

    eval {StateMachine::EventAdapter::XMLFile::__new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?StateMachine::EventAdapter::XMLFile::__new/;

    #### Now call the parent constructor, if any.

    eval {$this->SUPER::new(%args)};

    croak $@ if $@
	and $@ !~ /^Can\'t locate object method/;

    ####
    #### Typically this following contains your "real" constructor"
    #### so if you are debugging this next call my be a good candidate to step into.
    ####

    eval {StateMachine::EventAdapter::XMLFile::_new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?StateMachine::EventAdapter::XMLFile::_new/;

    $this;
}

###  END GENERATED CODE

=pod

=head1 MEMBERS AND MEMBER ACCESS METHODS

=cut



=pod

=head2 filename => "any string"*

Path to the file representing this StateMachineInterface XML information

=cut

sub getFilename {

=pod

=head3 $EventAdapter::XMLFile->getFilename ()


getter for member filename

=cut

    my $this = shift;





    return $this->{filename};
}
sub setFilename {

=pod

=head3 $EventAdapter::XMLFile->setFilename (filename => "any string"*)

 - filename ("any string")		 : Path to the file representing this StateMachineInterface XML information

setter for member filename

=cut

    my $this = shift;


    my $filename = shift;
    Confess "argument 'filename' is required for StateMachine::EventAdapter::XMLFile->setFilename()" unless defined $filename;



    $this->{filename} = $filename;
    return $filename;
}



=pod

=head2 filetype => "any string"

one of (xml|perl)

=cut

sub getFiletype {

=pod

=head3 $EventAdapter::XMLFile->getFiletype ()


getter for member filetype

=cut

    my $this = shift;





    return $this->{filetype};
}
sub setFiletype {

=pod

=head3 $EventAdapter::XMLFile->setFiletype (filetype => "any string")

 - filetype ("any string")		 : one of (xml|perl)

setter for member filetype

=cut

    my $this = shift;


    my $filetype = shift;



    $this->{filetype} = $filetype;
    return $filetype;
}



=pod

=head2 xml => HASH

the converted XML in a hash reference

=cut

sub getXml {

=pod

=head3 $EventAdapter::XMLFile->getXml ()


getter for member xml

=cut

    my $this = shift;





    return $this->{xml};
}
sub setXml {

=pod

=head3 $EventAdapter::XMLFile->setXml (xml => HASH)

 - xml (HASH)		 : the converted XML in a hash reference

setter for member xml

=cut

    my $this = shift;


    my $xml = shift;
        if (defined $xml) { Confess "argument 'xml' of method StateMachine::EventAdapter::XMLFile->setXml() is required to be of reference type HASH " unless ref($xml) =~ /^HASH/;}



    $this->{xml} = $xml;
    return $xml;
}



=pod

=head2 interfaces => HASH

hash table of all interface references

=cut

sub getInterfaces {

=pod

=head3 $EventAdapter::XMLFile->getInterfaces ()


getter for member interfaces

=cut

    my $this = shift;





    return $this->{interfaces};
}
sub setInterfaces {

=pod

=head3 $EventAdapter::XMLFile->setInterfaces (interfaces => HASH)

 - interfaces (HASH)		 : hash table of all interface references

setter for member interfaces

=cut

    my $this = shift;


    my $interfaces = shift;
        if (defined $interfaces) { Confess "argument 'interfaces' of method StateMachine::EventAdapter::XMLFile->setInterfaces() is required to be of reference type HASH " unless ref($interfaces) =~ /^HASH/;}



    $this->{interfaces} = $interfaces;
    return $interfaces;
}



=pod

=head2 debug => "any string"

debug allows an object to specify its debugPrint level

=cut

sub getDebug {

=pod

=head3 $EventAdapter::XMLFile->getDebug ()


getter for member debug

=cut

    my $this = shift;





    return $this->{debug};
}
sub setDebug {

=pod

=head3 $EventAdapter::XMLFile->setDebug (debug => "any string")

 - debug ("any string")		 : debug allows an object to specify its debugPrint level

setter for member debug

=cut

    my $this = shift;


    my $debug = shift;



    $this->{debug} = $debug;
    return $debug;
}



=pod

=head1 GENERALIZED OBJECT METHODS 

=cut



=pod

=over 4

=item _require (member1,member2,...,memberN)

will iterate over arguments and validate there is a non null value for each of the listed object members

=back

=cut


sub _require
{
    my $this = shift;
    map { 
	Confess "required member variable $_ not set" unless $this->getProperty($_);
    } (@_);
}

sub debugPrint { 
    my $this = shift;
    my $level = shift;
    Confess 'you\'ve called debugPrint - convert this call to $this->debugPrint()'
	unless ref($this);
    if ($this->{debug} >= $level || $main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

sub debugPrint_s {   # static version of debug print
    my $level = shift;
    if ($main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}

1;

=pod

=head1 NOTES ON THIS DOCUMENTATION

In method signatures a * denotes a required option.

This file was automatically generated from XMLFile.pm.m80 by 
bret on ubuntu (Linux ubuntu 2.6.31-19-generic-pae #56-Ubuntu SMP Thu Jan 28 02:29:51 UTC 2010 i686 GNU/Linux)


=head1 OBJECT METHODS

=cut



sub _new {

=pod

=head3 $EventAdapter::XMLFile->_new ()


callback constructor, do not call directly use new() instead

=cut

    my $this = shift;

    Confess "StateMachine::EventAdapter::XMLFile->_new requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



    my $XML1; 

    printmsg "loading " . $this->getFilename();
    
    my $filename = $this->getFilename();
    
    my $data = `cat $filename`;

    eval $data;

    $this->setXml($XML1);
     
    my @interfaces = @{$XML1->{interfaces}[0]->{interface}};
    
    my %interfaces;
    
    foreach my $interface (@interfaces) {
	$interfaces{$interface->{module}} = []
	    unless $interfaces{$interface->{module}};
        push (@{$interfaces{$interface->{module}}}, StateMachine::EventAdapter::Interface->new (xmlhash => $interface));
    }
    
    $this->setInterfaces(\%interfaces);
}

sub getInterfaceByName {
    
=pod

=head3 $EventAdapter::XMLFile->getInterfaceByName (interface => "any string"*)

 - interface ("any string")		 : the name of the interface to fetch

the interface to fetch by name

=cut

    my $this = shift;

    Confess "StateMachine::EventAdapter::XMLFile->getInterfaceByName requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $interface = $args{interface};
    Confess "argument 'interface' is required for StateMachine::EventAdapter::XMLFile->getInterfaceByName()" unless exists $args{interface};




    printmsg "looking for interface $interface";
    
    my $ret = $this->getInterfaces()->{$interface};
    
    Confess "XMLFile->getInterfaceByName(): cannot find interface $interface in file " . $this->getFilename unless 
        defined $ret;
    
    $ret;
}
