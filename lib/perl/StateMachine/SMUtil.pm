


=pod

=head1 NAME - StateMachine::SMUtil

Utilities for interacting state machines

=head1 EXAMPLE


    my $Util = $SMUtil->new();   # stub example .... expand


=cut

# This file was automatically generated from SMUtil.pm.m80 by 
# bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)
# DO NOT EDIT THIS FILE 


package StateMachine::SMUtil;

use Carp;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use strict;
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, @_, RESET }

use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}

use DB::RowSet;
use FileHandle;
use fields qw( debug );

=pod

=head1 CONSTRUCTOR

=over 4

=item StateMachine::SMUtil->new()

initializes on object of type StateMachine::SMUtil

=back

=cut


# %_allSetters - an array of all setters for all members of the class
my %_allSetters = ();

my %_allMemberAttributes = ();

BEGIN {
# $_allMembers{_TYPE} = 1; # - WHAT IS THIS FOR?
$_allMemberAttributes{debug} = {
          'name' => 'debug',
          'description' => 'debug allows an object to specify its debugPrint level'
        }
;
$_allSetters{debug} = \&setDebug;


}

#
# TODO ... needs to merge in the parents attributes; the commented out block is close.
#
sub getReflectionAPI { 
#     my $this = shift; 
#     my %unified = (%{$this->SUPER::getReflectionAPI()}, %_allMemberAttributes);
#     \%unified;
    \%_allMemberAttributes;
}

#
# For some (currently) mysterious reason on perl 5.8.8 on the Linux kernel 2.6.18-8.1.14.el5 there
# is no data in the %_allMemberAttributes.  Therefore here is another way to get a list of member data
# out of the class.
#

sub getMembers {
    my $this = shift;
    my @ret = keys(%{$this});
    \@ret;
}
    
sub new {
    my StateMachine::SMUtil $this = shift;

    print STDERR "in StateMachine::SMUtil::new(" . join (",", @_) . ")\n" if $ENV{DEBUG};
    Confess "Missing the value for an argument (even nulls) on creation of StateMachine::SMUtil" if scalar @_ % 2 != 0;

    my %args = @_;

    unless (ref $this) {
	$this = fields::new($this);
    }

    #
    # This next block tries to set any of the values that you passed into this
    # constructor. You might have said new X( arg1 => 123, arg2 => 456); It is going
    # to take that and try to call setArg1(123), setArg2(123). I.e. it is going
    # to derive the setter for your named argument (by upper casing the first letter
    # of your argument name) and then if it finds that the object can call the
    # setter (i.e. it is defined in this class or any parent class) it will call it.
    #
    # If the setter cannot be found - then assume that this is a bad argument
    # that was passed to the function and die with that information.
    #
    foreach my $key (keys(%args)) {

        my $setterName = $key;                              # workspace for determining the name of the setter
        $setterName =~ s/^(\w)/uc($1)/e;                    # uc the first char of the argument name. I.e. arg1 => Arg1.
        $setterName = "set" . $setterName;                  # prepend "set" to the uppercased argument name.

        if (my $fn = $this->UNIVERSAL::can($setterName)) {  # test that the object can call this function
            $fn->($this,$args{$key});                       # and call it
        } else {                                            # else fail with an error. 
            Confess "Field named \"$key\" is not defined in object StateMachine::SMUtil. typo ?\n";
        }
    }



    #### __new is the magic "pre-constructor".  You can intercept a call to the parent
    #### constructor by defining a __new() procedure in your class.

    eval {StateMachine::SMUtil::__new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?StateMachine::SMUtil::__new/;

    #### Now call the parent constructor, if any.

    eval {$this->SUPER::new(%args)};

    croak $@ if $@
	and $@ !~ /^Can\'t locate object method/;

    ####
    #### Typically this following contains your "real" constructor"
    #### so if you are debugging this next call my be a good candidate to step into.
    ####

    eval {StateMachine::SMUtil::_new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?StateMachine::SMUtil::_new/;

    $this;
}

###  END GENERATED CODE

=pod

=head1 MEMBERS AND MEMBER ACCESS METHODS

=cut



=pod

=head2 debug => "any string"

debug allows an object to specify its debugPrint level

=cut

sub getDebug {

=pod

=head3 $SMUtil->getDebug ()


getter for member debug

=cut

    my $this = shift;





    return $this->{debug};
}
sub setDebug {

=pod

=head3 $SMUtil->setDebug (debug => "any string")

 - debug ("any string")		 : debug allows an object to specify its debugPrint level

setter for member debug

=cut

    my $this = shift;


    my $debug = shift;



    $this->{debug} = $debug;
    return $debug;
}



=pod

=head1 GENERALIZED OBJECT METHODS 

=cut



=pod

=over 4

=item _require (member1,member2,...,memberN)

will iterate over arguments and validate there is a non null value for each of the listed object members

=back

=cut


sub _require
{
    my $this = shift;
    map { 
	Confess "required member variable $_ not set" unless $this->getProperty($_);
    } (@_);
}

sub debugPrint { 
    my $this = shift;
    my $level = shift;
    Confess 'you\'ve called debugPrint - convert this call to $this->debugPrint()'
	unless ref($this);
    if ($this->{debug} >= $level || $main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

sub debugPrint_s {   # static version of debug print
    my $level = shift;
    if ($main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}

1;

=pod

=head1 NOTES ON THIS DOCUMENTATION

In method signatures a * denotes a required option.

This file was automatically generated from SMUtil.pm.m80 by 
bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)


=head1 OBJECT METHODS

=cut



sub _new {

=pod

=head3 $SMUtil->_new ()


callback constructor, do not call directly use new() instead

=cut

    my $this = shift;

    Confess "StateMachine::SMUtil->_new requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



}

sub openTLOGFile {
    
=pod

=head3 $SMUtil->openTLOGFile (task_id => "any string"*, action_id => "any string"*, actionname => "any string"*)

 - task_id ("any string")		 : task_id of this logfile
 - action_id ("any string")		 : action_id of this logfile
 - actionname ("any string")		 : actionname of this logfile

return a filehandle to the tlog file for this task_id and action_id and action_name

=cut

    my $this = shift;

    Confess "StateMachine::SMUtil->openTLOGFile requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $task_id = $args{task_id};
    Confess "argument 'task_id' is required for StateMachine::SMUtil->openTLOGFile()" unless exists $args{task_id};
    my $action_id = $args{action_id};
    Confess "argument 'action_id' is required for StateMachine::SMUtil->openTLOGFile()" unless exists $args{action_id};
    my $actionname = $args{actionname};
    Confess "argument 'actionname' is required for StateMachine::SMUtil->openTLOGFile()" unless exists $args{actionname};



   do {							    
       my $FileHandle = new FileHandle;
       my $logfile = "/var/www/html/$ENV{M80_BDF}/taskData/$task_id/$action_id.$actionname.0";

       printmsg "opening log file $logfile";

       $FileHandle->open($logfile)
	   or Confess "failed to open $logfile: $@";
       return $FileHandle;
   }
							    
}


sub fetchActionRecord {
    
=pod

=head3 $SMUtil->fetchActionRecord (master_task_id => "any string"*, actionname => "any string"*, verbose => "any string", dbhandle => "any string"*)

 - master_task_id ("any string")		 : The master or parent task id (default: $ENV{master_task_id})
 - actionname ("any string")		 : actionname with in this task tree
 - verbose ("any string")		 : turn on SQL verbosity
 - dbhandle ("any string")		 : dbhandle for this sm schema

fetch the action record based on task_id (parent or master) and action name

=cut

    my $this = shift;

    Confess "StateMachine::SMUtil->fetchActionRecord requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $master_task_id = ($args{master_task_id} ? $args{master_task_id} : $ENV{master_task_id});
    Confess "argument 'master_task_id' is required for StateMachine::SMUtil->fetchActionRecord()" unless exists $args{master_task_id};
    my $actionname = $args{actionname};
    Confess "argument 'actionname' is required for StateMachine::SMUtil->fetchActionRecord()" unless exists $args{actionname};
    my $verbose = $args{verbose};
    my $dbhandle = $args{dbhandle};
    Confess "argument 'dbhandle' is required for StateMachine::SMUtil->fetchActionRecord()" unless exists $args{dbhandle};



   do {
       printmsg "(StateMachine::SMutil::fetchActionRecord) deriving action data .... this could take a second";
       return (DB::RowSet->new(dbh => $dbhandle->getDbh(),
			       verbose => $verbose,
			       sql => "
select 	action.*,
	to_char (action.updated_dt,'MM/DD/YYYY HH24:MI:SS') updated_dt_char,
	to_char (action.inserted_dt,'MM/DD/YYYY HH24:MI:SS') inserted_dt_char
from 	action,
	task,
	( 
		select 	task_id, 
			level l
		from 	task  
		start with 
			task_id = $master_task_id
		connect by prior 
			task_id = parent_task_id 
	) iv
where 	action.task_id = iv.task_id
and	task.task_id = action.task_id
and	actionname = '$actionname'
order by 
	action.inserted_dt"))->getResults();
   }
}


################################################################################

sub createContext {
   
=pod

=head3 $SMUtil->createContext (task_id => "any string"*, tag => "any string"*, value => "any string"*, dbhandle => DB::DBHandle*, verbose => "any string", nodelete => "any string")

 - task_id ("any string")		 : data to process (default: $ENV{task_id})
 - tag ("any string")		 : tag to create
 - value ("any string")		 : value to create
 - dbhandle (DB::DBHandle)		 : dbhandle to use
 - verbose ("any string")		 : verbosity
 - nodelete ("any string")		 : don't attempt to delete the row first

creates a context variable

=cut

    Confess "StateMachine::SMUtil::createContext requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;
    my $task_id = ($args{task_id} ? $args{task_id} : $ENV{task_id});
    Confess "argument 'task_id' is required for StateMachine::SMUtil::createContext()" unless defined $task_id;
    my $tag = $args{tag};
    Confess "argument 'tag' is required for StateMachine::SMUtil::createContext()" unless defined $tag;
    my $value = $args{value};
    Confess "argument 'value' is required for StateMachine::SMUtil::createContext()" unless defined $value;
    my $dbhandle = $args{dbhandle};
    Confess "argument 'dbhandle' is required for StateMachine::SMUtil::createContext()" unless defined $dbhandle;
    eval {my $dummy = $dbhandle->isa("DB::DBHandle");};Confess "$@\n" . Dumper($dbhandle) if $@;
    if (defined $dbhandle) { Confess "argument 'dbhandle' of method StateMachine::SMUtil::createContext() is required to be of reference type DB::DBHandle, but it looks to be of type " . ref ($dbhandle)  unless $dbhandle->isa("DB::DBHandle");}
    my $verbose = $args{verbose};
    my $nodelete = $args{nodelete};



    do {
	$dbhandle->execute (sql => "delete from task_context where task_id = $task_id and tag = '$tag'",
			    verbose => $verbose)
	    unless $nodelete;
	$dbhandle->execute (sql => "insert into task_context (task_id, tag, value) values ($task_id, '$tag', '$value')",
			    verbose => $verbose);
    };
}

