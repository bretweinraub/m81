


=pod

=head1 NAME - M80Repository::M80RepositoryObject

M80Repository::M80RepositoryObject description; stub description please expand

=head1 EXAMPLE


    my $M80Repository::M80RepositoryObject = $M80Repository::M80RepositoryObject->new();   # stub example .... expand


=cut

# This file was automatically generated from M80RepositoryObject.pm.m80 by 
# bret on localhost.localdomain (Linux localhost.localdomain 2.6.9-55.0.6.EL #1 Tue Sep 4 21:10:58 EDT 2007 i686 i686 i386 GNU/Linux)
# DO NOT EDIT THIS FILE 


package M80Repository::M80RepositoryObject;

use Carp;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use strict;
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, @_, RESET }

use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}

use fields qw( debug );

=pod

=head1 CONSTRUCTOR

=over 4

=item M80Repository::M80RepositoryObject->new()

initializes on object of type M80Repository::M80RepositoryObject

=back

=cut




# %_allSetters - an array of all setters for all members of the class
my %_allSetters = ();

my %_allMemberAttributes = ();
# $_allMembers{_TYPE} = 1; # - WHAT IS THIS FOR?
$_allMemberAttributes{debug} = {
          'name' => 'debug',
          'description' => 'debug allows an object to specify its debugPrint level'
        }
;
$_allSetters{debug} = \&setDebug;


sub getReflectionAPI { return %_allMemberAttributes }

sub new {
    my M80Repository::M80RepositoryObject $this = shift;

    print STDERR "in M80Repository::M80RepositoryObject::new(" . join (",", @_) . ")\n" if $ENV{DEBUG};
    Confess "Missing the value for an argument (even nulls) on creation of M80Repository::M80RepositoryObject" if scalar @_ % 2 != 0;

    my %args = @_;

    unless (ref $this) {
	$this = fields::new($this);
    }

    #
    # This next block tries to set any of the values that you passed into this
    # constructor. You might have said new X( arg1 => 123, arg2 => 456); It is going
    # to take that and try to call setArg1(123), setArg2(123). I.e. it is going
    # to derive the setter for your named argument (by upper casing the first letter
    # of your argument name) and then if it finds that the object can call the
    # setter (i.e. it is defined in this class or any parent class) it will call it.
    #
    # If the setter cannot be found - then assume that this is a bad argument
    # that was passed to the function and die with that information.
    #
    foreach my $key (keys(%args)) {

        my $setterName = $key;                              # workspace for determining the name of the setter
        $setterName =~ s/^(\w)/uc($1)/e;                    # uc the first char of the argument name. I.e. arg1 => Arg1.
        $setterName = "set" . $setterName;                  # prepend "set" to the uppercased argument name.

        if (my $fn = $this->UNIVERSAL::can($setterName)) {  # test that the object can call this function
            $fn->($this,$args{$key});                       # and call it
        } else {                                            # else fail with an error. 
            Confess "Field named \"$key\" is not defined in object M80Repository::M80RepositoryObject. typo ?\n";
        }
    }



    eval {
	M80Repository::M80RepositoryObject::__new($this,%args);
    };

    croak $@ if $@
	and $@ !~ /^Undefined subroutine/;


    eval {
	$this->SUPER::new(%args);
    };

    croak $@ if $@
	and $@ !~ /^Can\'t locate object method/;

    eval {
	M80Repository::M80RepositoryObject::_new($this,%args);
    };

    croak $@ if $@
	and $@ !~ /^Undefined subroutine/;

    return $this;
}

=pod

=head1 MEMBERS AND MEMBER ACCESS METHODS

=cut



=pod

=head2 debug => "any string"

debug allows an object to specify its debugPrint level

=cut

sub getDebug {

=pod

=head3 $M80RepositoryObject->getDebug ()


getter for member debug

=cut

    my $this = shift;




    return $this->{debug};
}
sub setDebug {

=pod

=head3 $M80RepositoryObject->setDebug (debug => "any string")

 - debug ("any string")		 : debug allows an object to specify its debugPrint level

setter for member debug

=cut

    my $this = shift;


    my $debug = shift;


    $this->{debug} = $debug;
    return $debug;
}



=pod

=head1 GENERALIZED OBJECT METHODS 

=cut



=pod

=over 4

=item _require (member1,member2,...,memberN)

will iterate over arguments and validate there is a non null value for each of the listed object members

=back

=cut


sub _require
{
    my $this = shift;
    map { 
	Confess "required member variable $_ not set" unless $this->getProperty($_);
    } (@_);
}

sub debugPrint { 
    my $this = shift;
    my $level = shift;
    Confess 'you\'ve called debugPrint - convert this call to $this->debugPrint()'
	unless ref($this);
    if ($this->{debug} >= $level || $main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

sub debugPrint_s {   # static version of debug print
    my $level = shift;
    if ($main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

use Carp;

sub docmd (@) {    
    printmsg "@_" ;
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

1;

=pod

=head1 NOTES ON THIS DOCUMENTATION

In method signatures a * denotes a required option.

This file was automatically generated from M80RepositoryObject.pm.m80 by 
bret on localhost.localdomain (Linux localhost.localdomain 2.6.9-55.0.6.EL #1 Tue Sep 4 21:10:58 EDT 2007 i686 i686 i386 GNU/Linux)


=head1 OBJECT METHODS

=cut



sub _new {

=pod

=head3 $M80RepositoryObject->_new ()


callback constructor, do not call directly use new() instead

=cut

    my $this = shift;

    Confess "M80Repository::M80RepositoryObject->_new requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;


}
