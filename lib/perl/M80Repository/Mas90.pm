



=pod

=head1 NAME - M80Repository::Mas90

Mas90 description; stub description please expand

=head1 EXAMPLE


    my $Mas90 = $Mas90->new();   # stub example .... expand


# or in a m80 repository file
use M80Repository::Mas90;
M80Repository::Mas90->new
    (slave_user => "",
     slave_hostname => "",
     user => "",
     hostname => "",
     mas90_user => "",
     mas90_password => "",
     mas90_ODBC => "",
     m81_lib => "",)->dump;


=cut

# This file was automatically generated from Mas90.pm.m80 by 
# bret on ubuntu (Linux ubuntu 2.6.31-19-generic-pae #56-Ubuntu SMP Thu Jan 28 02:29:51 UTC 2010 i686 GNU/Linux)
# DO NOT EDIT THIS FILE 


package M80Repository::Mas90;

use Carp;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use strict;
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, @_, RESET }

use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}

use Utils::PerlTools;

use base qw(M80Repository::Base);

=pod

=head1 INHERITANCE

M80Repository::Mas90 extends class M80Repository::Base ; refer to the documentation for that object for member variables and methods.

=cut

use fields qw( name slave_user slave_hostname user hostname port mas90_user mas90_password mas90_ODBC m81_lib debug );

=pod

=head1 CONSTRUCTOR

=over 4

=item M80Repository::Mas90->new()

initializes on object of type M80Repository::Mas90

=back

=cut


# %_allSetters - an array of all setters for all members of the class
my %_allSetters = ();

my %_allMemberAttributes = ();

BEGIN {
# $_allMembers{_TYPE} = 1; # - WHAT IS THIS FOR?
$_allMemberAttributes{name} = {
          'name' => 'name',
          'description' => 'name of this object'
        }
;
$_allSetters{name} = \&setName;
$_allMemberAttributes{slave_user} = {
          'name' => 'slave_user',
          'description' => 'user if using a windows slave'
        }
;
$_allSetters{slave_user} = \&setSlave_user;
$_allMemberAttributes{slave_hostname} = {
          'name' => 'slave_hostname',
          'description' => 'hostname if using a windows slace'
        }
;
$_allSetters{slave_hostname} = \&setSlave_hostname;
$_allMemberAttributes{user} = {
          'name' => 'user',
          'description' => 'user on mas90 box'
        }
;
$_allSetters{user} = \&setUser;
$_allMemberAttributes{hostname} = {
          'name' => 'hostname',
          'description' => 'hostname on mas90 box'
        }
;
$_allSetters{hostname} = \&setHostname;
$_allMemberAttributes{port} = {
          'name' => 'port',
          'description' => 'optional port number for ssh server on mas90 host'
        }
;
$_allSetters{port} = \&setPort;
$_allMemberAttributes{mas90_user} = {
          'name' => 'mas90_user',
          'description' => 'providex user name'
        }
;
$_allSetters{mas90_user} = \&setMas90_user;
$_allMemberAttributes{mas90_password} = {
          'name' => 'mas90_password',
          'description' => 'providex password'
        }
;
$_allSetters{mas90_password} = \&setMas90_password;
$_allMemberAttributes{mas90_ODBC} = {
          'name' => 'mas90_ODBC',
          'description' => 'providex odbc connection'
        }
;
$_allSetters{mas90_ODBC} = \&setMas90_ODBC;
$_allMemberAttributes{m81_lib} = {
          'name' => 'm81_lib',
          'description' => 'm81 library on mas90 box'
        }
;
$_allSetters{m81_lib} = \&setM81_lib;
$_allMemberAttributes{debug} = {
          'name' => 'debug',
          'description' => 'debug allows an object to specify its debugPrint level'
        }
;
$_allSetters{debug} = \&setDebug;


}

#
# TODO ... needs to merge in the parents attributes; the commented out block is close.
#
sub getReflectionAPI { 
#     my $this = shift; 
#     my %unified = (%{$this->SUPER::getReflectionAPI()}, %_allMemberAttributes);
#     \%unified;
    \%_allMemberAttributes;
}

#
# For some (currently) mysterious reason on perl 5.8.8 on the Linux kernel 2.6.18-8.1.14.el5 there
# is no data in the %_allMemberAttributes.  Therefore here is another way to get a list of member data
# out of the class.
#

sub getMembers {
    my $this = shift;
    my @ret = keys(%{$this});
    \@ret;
}
    
sub new {
    my M80Repository::Mas90 $this = shift;

    print STDERR "in M80Repository::Mas90::new(" . join (",", @_) . ")\n" if $ENV{DEBUG};
    Confess "Missing the value for an argument (even nulls) on creation of M80Repository::Mas90" if scalar @_ % 2 != 0;

    my %args = @_;

    unless (ref $this) {
	$this = fields::new($this);
    }

    #
    # This next block tries to set any of the values that you passed into this
    # constructor. You might have said new X( arg1 => 123, arg2 => 456); It is going
    # to take that and try to call setArg1(123), setArg2(123). I.e. it is going
    # to derive the setter for your named argument (by upper casing the first letter
    # of your argument name) and then if it finds that the object can call the
    # setter (i.e. it is defined in this class or any parent class) it will call it.
    #
    # If the setter cannot be found - then assume that this is a bad argument
    # that was passed to the function and die with that information.
    #
    foreach my $key (keys(%args)) {

        my $setterName = $key;                              # workspace for determining the name of the setter
        $setterName =~ s/^(\w)/uc($1)/e;                    # uc the first char of the argument name. I.e. arg1 => Arg1.
        $setterName = "set" . $setterName;                  # prepend "set" to the uppercased argument name.

        if (my $fn = $this->UNIVERSAL::can($setterName)) {  # test that the object can call this function
            $fn->($this,$args{$key});                       # and call it
        } else {                                            # else fail with an error. 
            Confess "Field named \"$key\" is not defined in object M80Repository::Mas90. typo ?\n";
        }
    }



    #### __new is the magic "pre-constructor".  You can intercept a call to the parent
    #### constructor by defining a __new() procedure in your class.

    eval {M80Repository::Mas90::__new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?M80Repository::Mas90::__new/;

    #### Now call the parent constructor, if any.

    eval {$this->SUPER::new(%args)};

    croak $@ if $@
	and $@ !~ /^Can\'t locate object method/;

    ####
    #### Typically this following contains your "real" constructor"
    #### so if you are debugging this next call my be a good candidate to step into.
    ####

    eval {M80Repository::Mas90::_new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?M80Repository::Mas90::_new/;

    $this;
}

###  END GENERATED CODE

=pod

=head1 MEMBERS AND MEMBER ACCESS METHODS

=cut



=pod

=head2 name => "any string"

name of this object

=cut

sub getName {

=pod

=head3 $Mas90->getName ()


getter for member name

=cut

    my $this = shift;





    return $this->{name};
}
sub setName {

=pod

=head3 $Mas90->setName (name => "any string")

 - name ("any string")		 : name of this object

setter for member name

=cut

    my $this = shift;


    my $name = shift;



    $this->{name} = $name;
    return $name;
}



=pod

=head2 slave_user => "any string"

user if using a windows slave

=cut

sub getSlave_user {

=pod

=head3 $Mas90->getSlave_user ()


getter for member slave_user

=cut

    my $this = shift;





    return $this->{slave_user};
}
sub setSlave_user {

=pod

=head3 $Mas90->setSlave_user (slave_user => "any string")

 - slave_user ("any string")		 : user if using a windows slave

setter for member slave_user

=cut

    my $this = shift;


    my $slave_user = shift;



    $this->{slave_user} = $slave_user;
    return $slave_user;
}



=pod

=head2 slave_hostname => "any string"

hostname if using a windows slace

=cut

sub getSlave_hostname {

=pod

=head3 $Mas90->getSlave_hostname ()


getter for member slave_hostname

=cut

    my $this = shift;





    return $this->{slave_hostname};
}
sub setSlave_hostname {

=pod

=head3 $Mas90->setSlave_hostname (slave_hostname => "any string")

 - slave_hostname ("any string")		 : hostname if using a windows slace

setter for member slave_hostname

=cut

    my $this = shift;


    my $slave_hostname = shift;



    $this->{slave_hostname} = $slave_hostname;
    return $slave_hostname;
}



=pod

=head2 user => "any string"

user on mas90 box

=cut

sub getUser {

=pod

=head3 $Mas90->getUser ()


getter for member user

=cut

    my $this = shift;





    return $this->{user};
}
sub setUser {

=pod

=head3 $Mas90->setUser (user => "any string")

 - user ("any string")		 : user on mas90 box

setter for member user

=cut

    my $this = shift;


    my $user = shift;



    $this->{user} = $user;
    return $user;
}



=pod

=head2 hostname => "any string"

hostname on mas90 box

=cut

sub getHostname {

=pod

=head3 $Mas90->getHostname ()


getter for member hostname

=cut

    my $this = shift;





    return $this->{hostname};
}
sub setHostname {

=pod

=head3 $Mas90->setHostname (hostname => "any string")

 - hostname ("any string")		 : hostname on mas90 box

setter for member hostname

=cut

    my $this = shift;


    my $hostname = shift;



    $this->{hostname} = $hostname;
    return $hostname;
}



=pod

=head2 port => "any string"

optional port number for ssh server on mas90 host

=cut

sub getPort {

=pod

=head3 $Mas90->getPort ()


getter for member port

=cut

    my $this = shift;





    return $this->{port};
}
sub setPort {

=pod

=head3 $Mas90->setPort (port => "any string")

 - port ("any string")		 : optional port number for ssh server on mas90 host

setter for member port

=cut

    my $this = shift;


    my $port = shift;



    $this->{port} = $port;
    return $port;
}



=pod

=head2 mas90_user => "any string"

providex user name

=cut

sub getMas90_user {

=pod

=head3 $Mas90->getMas90_user ()


getter for member mas90_user

=cut

    my $this = shift;





    return $this->{mas90_user};
}
sub setMas90_user {

=pod

=head3 $Mas90->setMas90_user (mas90_user => "any string")

 - mas90_user ("any string")		 : providex user name

setter for member mas90_user

=cut

    my $this = shift;


    my $mas90_user = shift;



    $this->{mas90_user} = $mas90_user;
    return $mas90_user;
}



=pod

=head2 mas90_password => "any string"

providex password

=cut

sub getMas90_password {

=pod

=head3 $Mas90->getMas90_password ()


getter for member mas90_password

=cut

    my $this = shift;





    return $this->{mas90_password};
}
sub setMas90_password {

=pod

=head3 $Mas90->setMas90_password (mas90_password => "any string")

 - mas90_password ("any string")		 : providex password

setter for member mas90_password

=cut

    my $this = shift;


    my $mas90_password = shift;



    $this->{mas90_password} = $mas90_password;
    return $mas90_password;
}



=pod

=head2 mas90_ODBC => "any string"

providex odbc connection

=cut

sub getMas90_ODBC {

=pod

=head3 $Mas90->getMas90_ODBC ()


getter for member mas90_ODBC

=cut

    my $this = shift;





    return $this->{mas90_ODBC};
}
sub setMas90_ODBC {

=pod

=head3 $Mas90->setMas90_ODBC (mas90_ODBC => "any string")

 - mas90_ODBC ("any string")		 : providex odbc connection

setter for member mas90_ODBC

=cut

    my $this = shift;


    my $mas90_ODBC = shift;



    $this->{mas90_ODBC} = $mas90_ODBC;
    return $mas90_ODBC;
}



=pod

=head2 m81_lib => "any string"

m81 library on mas90 box

=cut

sub getM81_lib {

=pod

=head3 $Mas90->getM81_lib ()


getter for member m81_lib

=cut

    my $this = shift;





    return $this->{m81_lib};
}
sub setM81_lib {

=pod

=head3 $Mas90->setM81_lib (m81_lib => "any string")

 - m81_lib ("any string")		 : m81 library on mas90 box

setter for member m81_lib

=cut

    my $this = shift;


    my $m81_lib = shift;



    $this->{m81_lib} = $m81_lib;
    return $m81_lib;
}



=pod

=head2 debug => "any string"

debug allows an object to specify its debugPrint level

=cut

sub getDebug {

=pod

=head3 $Mas90->getDebug ()


getter for member debug

=cut

    my $this = shift;





    return $this->{debug};
}
sub setDebug {

=pod

=head3 $Mas90->setDebug (debug => "any string")

 - debug ("any string")		 : debug allows an object to specify its debugPrint level

setter for member debug

=cut

    my $this = shift;


    my $debug = shift;



    $this->{debug} = $debug;
    return $debug;
}



=pod

=head1 GENERALIZED OBJECT METHODS 

=cut



=pod

=over 4

=item _require (member1,member2,...,memberN)

will iterate over arguments and validate there is a non null value for each of the listed object members

=back

=cut


sub _require
{
    my $this = shift;
    map { 
	Confess "required member variable $_ not set" unless $this->getProperty($_);
    } (@_);
}

sub debugPrint { 
    my $this = shift;
    my $level = shift;
    Confess 'you\'ve called debugPrint - convert this call to $this->debugPrint()'
	unless ref($this);
    if ($this->{debug} >= $level || $main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

sub debugPrint_s {   # static version of debug print
    my $level = shift;
    if ($main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}

1;

=pod

=head1 NOTES ON THIS DOCUMENTATION

In method signatures a * denotes a required option.

This file was automatically generated from Mas90.pm.m80 by 
bret on ubuntu (Linux ubuntu 2.6.31-19-generic-pae #56-Ubuntu SMP Thu Jan 28 02:29:51 UTC 2010 i686 GNU/Linux)


=head1 OBJECT METHODS

=cut



sub _new {

=pod

=head3 $Mas90->_new ()


callback constructor, do not call directly use new() instead

=cut

    my $this = shift;

    Confess "M80Repository::Mas90->_new requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



}

################################################################################

sub dump {
   
=pod

=head3 $Mas90->dump ()


dump the output for the m80 repository

=cut

    my $this = shift;

    Confess "M80Repository::Mas90->dump requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



    do {
	$this->SUPER::dump(@_);
    };
}



