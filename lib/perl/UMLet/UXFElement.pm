


=pod

=head1 NAME - UMLet::UXFElement

A UXF Element

=head1 EXAMPLE

No example(s) have been documented for this object.

=cut

# This file was automatically generated from UXFElement.pm.m80 by 
# bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)
# DO NOT EDIT THIS FILE 


package UMLet::UXFElement;

use Carp;
use Data::Dumper;
use Term::ANSIColor qw(:constants);
use strict;
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, @_, RESET }

use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}

use fields qw( type x y h w text debug );

=pod

=head1 CONSTRUCTOR

=over 4

=item UMLet::UXFElement->new()

initializes on object of type UMLet::UXFElement

=back

=cut


# %_allSetters - an array of all setters for all members of the class
my %_allSetters = ();

my %_allMemberAttributes = ();

BEGIN {
# $_allMembers{_TYPE} = 1; # - WHAT IS THIS FOR?
$_allMemberAttributes{type} = {
          'required' => 1,
          'format' => '[\\w\\.]+',
          'name' => 'type',
          'type' => 'string',
          'description' => 'type of UXF element'
        }
;
$_allSetters{type} = \&setType;
$_allMemberAttributes{x} = {
          'format' => '\\d+',
          'required' => 1,
          'name' => 'x',
          'type' => 'string',
          'description' => 'x coordinate for this element'
        }
;
$_allSetters{x} = \&setX;
$_allMemberAttributes{y} = {
          'format' => '\\d+',
          'required' => 1,
          'name' => 'y',
          'type' => 'string',
          'description' => 'y coordinate for this element'
        }
;
$_allSetters{y} = \&setY;
$_allMemberAttributes{h} = {
          'format' => '\\d+',
          'required' => 1,
          'name' => 'h',
          'type' => 'string',
          'description' => 'height of this element'
        }
;
$_allSetters{h} = \&setH;
$_allMemberAttributes{w} = {
          'format' => '\\d+',
          'required' => 1,
          'name' => 'w',
          'type' => 'string',
          'description' => 'width of this element'
        }
;
$_allSetters{w} = \&setW;
$_allMemberAttributes{text} = {
          'name' => 'text',
          'type' => 'string',
          'description' => 'The text(content) portion of this element'
        }
;
$_allSetters{text} = \&setText;
$_allMemberAttributes{debug} = {
          'name' => 'debug',
          'description' => 'debug allows an object to specify its debugPrint level'
        }
;
$_allSetters{debug} = \&setDebug;


}

#
# TODO ... needs to merge in the parents attributes; the commented out block is close.
#
sub getReflectionAPI { 
#     my $this = shift; 
#     my %unified = (%{$this->SUPER::getReflectionAPI()}, %_allMemberAttributes);
#     \%unified;
    \%_allMemberAttributes;
}

#
# For some (currently) mysterious reason on perl 5.8.8 on the Linux kernel 2.6.18-8.1.14.el5 there
# is no data in the %_allMemberAttributes.  Therefore here is another way to get a list of member data
# out of the class.
#

sub getMembers {
    my $this = shift;
    my @ret = keys(%{$this});
    \@ret;
}
    
sub new {
    my UMLet::UXFElement $this = shift;

    print STDERR "in UMLet::UXFElement::new(" . join (",", @_) . ")\n" if $ENV{DEBUG};
    Confess "Missing the value for an argument (even nulls) on creation of UMLet::UXFElement" if scalar @_ % 2 != 0;

    my %args = @_;

    unless (ref $this) {
	$this = fields::new($this);
    }

    #
    # This next block tries to set any of the values that you passed into this
    # constructor. You might have said new X( arg1 => 123, arg2 => 456); It is going
    # to take that and try to call setArg1(123), setArg2(123). I.e. it is going
    # to derive the setter for your named argument (by upper casing the first letter
    # of your argument name) and then if it finds that the object can call the
    # setter (i.e. it is defined in this class or any parent class) it will call it.
    #
    # If the setter cannot be found - then assume that this is a bad argument
    # that was passed to the function and die with that information.
    #
    foreach my $key (keys(%args)) {

        my $setterName = $key;                              # workspace for determining the name of the setter
        $setterName =~ s/^(\w)/uc($1)/e;                    # uc the first char of the argument name. I.e. arg1 => Arg1.
        $setterName = "set" . $setterName;                  # prepend "set" to the uppercased argument name.

        if (my $fn = $this->UNIVERSAL::can($setterName)) {  # test that the object can call this function
            $fn->($this,$args{$key});                       # and call it
        } else {                                            # else fail with an error. 
            Confess "Field named \"$key\" is not defined in object UMLet::UXFElement. typo ?\n";
        }
    }


    Confess "cannot initialize object of type UMLet::UXFElement without required member variable type"
        unless exists $this->{type};

    Confess "cannot initialize object of type UMLet::UXFElement without required member variable x"
        unless exists $this->{x};

    Confess "cannot initialize object of type UMLet::UXFElement without required member variable y"
        unless exists $this->{y};

    Confess "cannot initialize object of type UMLet::UXFElement without required member variable h"
        unless exists $this->{h};

    Confess "cannot initialize object of type UMLet::UXFElement without required member variable w"
        unless exists $this->{w};


    #### __new is the magic "pre-constructor".  You can intercept a call to the parent
    #### constructor by defining a __new() procedure in your class.

    eval {UMLet::UXFElement::__new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?UMLet::UXFElement::__new/;

    #### Now call the parent constructor, if any.

    eval {$this->SUPER::new(%args)};

    croak $@ if $@
	and $@ !~ /^Can\'t locate object method/;

    ####
    #### Typically this following contains your "real" constructor"
    #### so if you are debugging this next call my be a good candidate to step into.
    ####

    eval {UMLet::UXFElement::_new($this,%args);};

    croak $@ if $@
	and $@ !~ /^Undefined subroutine.+?UMLet::UXFElement::_new/;

    $this;
}

###  END GENERATED CODE

=pod

=head1 MEMBERS AND MEMBER ACCESS METHODS

=cut



=pod

=head2 type => "[\w\.]+"*

type of UXF element

=cut

sub getType {

=pod

=head3 $UXFElement->getType ()


getter for member type

=cut

    my $this = shift;





    return $this->{type};
}
sub setType {

=pod

=head3 $UXFElement->setType (type => "[\w\.]+"*)

 - type ("[\w\.]+")		 : type of UXF element

setter for member type

=cut

    my $this = shift;


    my $type = shift;
    Confess "argument 'type' is required for UMLet::UXFElement->setType()" unless defined $type;
        if (defined $type) { Confess "argument 'type' of method UMLet::UXFElement->setType() failed format validation of '[\w\.]+'" unless $type =~ /[\w\.]+/;}



    $this->{type} = $type;
    return $type;
}



=pod

=head2 x => "\d+"*

x coordinate for this element

=cut

sub getX {

=pod

=head3 $UXFElement->getX ()


getter for member x

=cut

    my $this = shift;





    return $this->{x};
}
sub setX {

=pod

=head3 $UXFElement->setX (x => "\d+"*)

 - x ("\d+")		 : x coordinate for this element

setter for member x

=cut

    my $this = shift;


    my $x = shift;
    Confess "argument 'x' is required for UMLet::UXFElement->setX()" unless defined $x;
        if (defined $x) { Confess "argument 'x' of method UMLet::UXFElement->setX() failed format validation of '\d+'" unless $x =~ /\d+/;}



    $this->{x} = $x;
    return $x;
}



=pod

=head2 y => "\d+"*

y coordinate for this element

=cut

sub getY {

=pod

=head3 $UXFElement->getY ()


getter for member y

=cut

    my $this = shift;





    return $this->{y};
}
sub setY {

=pod

=head3 $UXFElement->setY (y => "\d+"*)

 - y ("\d+")		 : y coordinate for this element

setter for member y

=cut

    my $this = shift;


    my $y = shift;
    Confess "argument 'y' is required for UMLet::UXFElement->setY()" unless defined $y;
        if (defined $y) { Confess "argument 'y' of method UMLet::UXFElement->setY() failed format validation of '\d+'" unless $y =~ /\d+/;}



    $this->{y} = $y;
    return $y;
}



=pod

=head2 h => "\d+"*

height of this element

=cut

sub getH {

=pod

=head3 $UXFElement->getH ()


getter for member h

=cut

    my $this = shift;





    return $this->{h};
}
sub setH {

=pod

=head3 $UXFElement->setH (h => "\d+"*)

 - h ("\d+")		 : height of this element

setter for member h

=cut

    my $this = shift;


    my $h = shift;
    Confess "argument 'h' is required for UMLet::UXFElement->setH()" unless defined $h;
        if (defined $h) { Confess "argument 'h' of method UMLet::UXFElement->setH() failed format validation of '\d+'" unless $h =~ /\d+/;}



    $this->{h} = $h;
    return $h;
}



=pod

=head2 w => "\d+"*

width of this element

=cut

sub getW {

=pod

=head3 $UXFElement->getW ()


getter for member w

=cut

    my $this = shift;





    return $this->{w};
}
sub setW {

=pod

=head3 $UXFElement->setW (w => "\d+"*)

 - w ("\d+")		 : width of this element

setter for member w

=cut

    my $this = shift;


    my $w = shift;
    Confess "argument 'w' is required for UMLet::UXFElement->setW()" unless defined $w;
        if (defined $w) { Confess "argument 'w' of method UMLet::UXFElement->setW() failed format validation of '\d+'" unless $w =~ /\d+/;}



    $this->{w} = $w;
    return $w;
}



=pod

=head2 text => "any string"

The text(content) portion of this element

=cut

sub getText {

=pod

=head3 $UXFElement->getText ()


getter for member text

=cut

    my $this = shift;





    return $this->{text};
}
sub setText {

=pod

=head3 $UXFElement->setText (text => "any string")

 - text ("any string")		 : The text(content) portion of this element

setter for member text

=cut

    my $this = shift;


    my $text = shift;



    $this->{text} = $text;
    return $text;
}



=pod

=head2 debug => "any string"

debug allows an object to specify its debugPrint level

=cut

sub getDebug {

=pod

=head3 $UXFElement->getDebug ()


getter for member debug

=cut

    my $this = shift;





    return $this->{debug};
}
sub setDebug {

=pod

=head3 $UXFElement->setDebug (debug => "any string")

 - debug ("any string")		 : debug allows an object to specify its debugPrint level

setter for member debug

=cut

    my $this = shift;


    my $debug = shift;



    $this->{debug} = $debug;
    return $debug;
}



=pod

=head1 GENERALIZED OBJECT METHODS 

=cut



=pod

=over 4

=item _require (member1,member2,...,memberN)

will iterate over arguments and validate there is a non null value for each of the listed object members

=back

=cut


sub _require
{
    my $this = shift;
    map { 
	Confess "required member variable $_ not set" unless $this->getProperty($_);
    } (@_);
}

sub debugPrint { 
    my $this = shift;
    my $level = shift;
    Confess 'you\'ve called debugPrint - convert this call to $this->debugPrint()'
	unless ref($this);
    if ($this->{debug} >= $level || $main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

sub debugPrint_s {   # static version of debug print
    my $level = shift;
    if ($main::debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}

use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}

1;

=pod

=head1 NOTES ON THIS DOCUMENTATION

In method signatures a * denotes a required option.

This file was automatically generated from UXFElement.pm.m80 by 
bweinraub on li264-192 (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux)


=head1 OBJECT METHODS

=cut



sub _new {

=pod

=head3 $UXFElement->_new ()


callback constructor, do not call directly use new() instead

=cut

    my $this = shift;

    Confess "UMLet::UXFElement->_new requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;



}

sub dump {
    
=pod

=head3 $UXFElement->dump ()


returns a UXF Element to the caller

=cut

    my $this = shift;

    Confess "UMLet::UXFElement->dump requires named arguments, or maybe a non-static method is being called in a static context " if scalar @_ && scalar @_ % 2 != 0;
    my %args = @_;




    my $ret="";
    
    $ret .= "<element><type>" . $this->getType() . "</type><coordinates><x>" . $this->getX() . 
	"</x><y>" . $this->getY() . "</y><w>" . $this->getW() . "</w><h>" . $this->getH() . 
	"</h></coordinates><panel_attributes>\n";

    $ret .= $this->getText();

    $ret .= '</panel_attributes><additional_attributes></additional_attributes></element>
';

    return $ret;
}




