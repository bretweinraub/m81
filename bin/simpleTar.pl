#!/usr/bin/perl

use Carp;
use Getopt::Long;
use Data::Dumper;
use Pod::Usage;
use File::Basename;

sub print_usage {
    if (scalar @_ > 0) {
        print STDERR "@_\n";
        exit(1);
    } else {
        pod2usage({ -exitval => 1, 
                    -verbose => ($debug ? $debug : 1),
                    -output  => \*STDERR});
    }
}

use Template::SimpleTextArchive;
use File::Basename;

sub printmsg (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_.\n" ;
}

sub printmsgn (@) { 
    my $date = localtime;
    print STDERR $date . ":" . basename($0) . ":($$): @_\n" ;
}

sub docmdi {    
    printmsg "@_";
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - ignoring\n";
        }
    }
    $rc;
}
use Carp;

sub docmdq (@) {    
    system(@_);

    my $rc;
    if ($? == -1) {
        $rc = -1; printmsg "failed to execute: $!";
	exit -1;
    }
    elsif ($? & 127) {
        $rc = $? & 127;
        printmsg "child process died with signal $rc, ", ($? & 128) ? 'with' : 'without', " coredump";
	exit $rc;
    }
    else {
        $rc = $? >> 8;
        if ($rc) {
            printmsg "child process exited with value $rc - Exiting!";
            exit $rc;
        }
    }
}

sub docmd (@) {    
    printmsg "@_" ;
    docmdq(@_);
}
sub cleanup ($@) { 
    my $exit_code = shift;
    printmsg @_ if scalar @_;
    printmsg "exiting with exit code = $exit_code";
    exit $exit_code;
}
sub debugPrint ($@) { 
    my $level = shift;
    if ($debug >= $level) {
        my ($caller) = (caller(1))[3];
        $caller = "[$caller]:" if $caller;
        my $date = localtime;
        print STDERR $caller . $date . ":" . basename($0) . ":($$): @_.\n" ;
    }
}
use Term::ANSIColor qw(:constants);
sub Confess (@) {confess BOLD, RED, @_, RESET}
sub Warn (@) { warn YELLOW, BOLD, ON_BLACK, "@_", RESET }
my $create;
$create = $ENV{create} if $ENV{create};
my $extract;
$extract = $ENV{extract} if $ENV{extract};
my $root;
$root = $ENV{root} if $ENV{root};
my $file;
$file = $ENV{file} if $ENV{file};
my $runPathHeader;
$runPathHeader = $ENV{runPathHeader} if $ENV{runPathHeader};
my $verbose;
$verbose = $ENV{verbose} if $ENV{verbose};
$trace = "0";
$trace = $ENV{trace} if $ENV{trace};
$debug = "0";
$debug = $ENV{debug} if $ENV{debug};
my $help = "0";
$help = $ENV{help} if $ENV{help};

GetOptions( 	'create'	=> \$create,
	'x|extract'	=> \$extract,
	'rootDirectory:s'	=> \$root,
	'f|archiveFile:s'	=> \$file,
	'useRunPathHeader'	=> \$runPathHeader,
	'verbose+'	=> \$verbose,
	'trace'	=> \$trace,
	'debug+'	=> \$debug,
	'help'	=> \$help,
 );

print_usage() if $help;

=pod

=head1 NAME

simpleTar.pl    

=head1 SYNOPSIS

A wrapper around the Template::SimpleTextArchive library

=head1 ARGUMENTS

=over 4


=item 'create'

Set this commandline flag to create a new archive


=item 'x|extract'

Set this commandline flag to extract an existing archive


=item [REQUIRED] 'rootDirectory:s'

The root directory that the archive file should created from/extracted to


=item [REQUIRED] 'f|archiveFile:s'

The archive file


=item 'useRunPathHeader'

Set this to include a "safe" runPath header in the generated template file. This is for convenience only.


=item 'verbose+'

Turn on verbose output


=item 'trace'

The $trace command line flag turns on trace functionality


=item 'debug+'

The $debug command line flag is additive and can be used with the &debugPrint subroutine


=item 'help'

The help command line flag will print the help message



=back



=head1 PERLSCRIPT GENERATED SCRIPTS

This script was generated with the Helpers::PerlScript pre-compiler.

This file was automatically generated from the file: simpleTar.pl.m80 by
bweinraub on  (Linux li264-192 2.6.35.4-x86_64-linode16 #1 SMP Mon Sep 20 16:03:34 UTC 2010 x86_64 GNU/Linux
) on Mon Dec 27 18:27:50 2010.

The following functions are included by default. The functions all have 
prototypes that make the parens optional.

=over 4

=item printmsg (@)

Will print a formatted message to STDERR.

=item docmdi (@)

Will run a system command and ignore the return code

=item docmd (@)

Will run a system command and exit with the return code of the child process, if it is non-zero

=item debugPrint ($@)

Use it like C<debugPrint 1, 'Some info message'> or C<debugPrint 2, 'Some trace message'> and
it will print out a little more information than the printmsg command.

=back

=cut

# ## This is autogenerated documentation

 
print_usage() unless $root && $file && ($create || $extract);

my $t = Template::SimpleTextArchive->new(rootDirectory => $root,
                                         archiveFile => $file,
                                         debug => $debug,
                                         defaultRunPathHeader => $runPathHeader,
                                         verbose => $verbose);
if ($create) {
    $t->create();
} elsif ($extract) {
    $t->extract();
}

cleanup 0; # "archive file created in $file";
